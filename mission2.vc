void start()
{
	int starttime;
	
	SpawnPlayer(204, 15);

	sAreaName = "Mission 2";

	InitMap(2);
	
	SetLowObsZone(16);
	
	MusicSwitch("mission2.mod", 15);
	
	LoadAnimationEX("blink.png", 16, 16, 204*16, 15*16, "T1 F0 W50 F2 W50 F1 W50 F2 W50 R");
	
	if(!bLoadingGame)
	{
		CrossFade(200);

		starttime = timer;

		while(timer-starttime < 100)	//1 sec to remove blur effect
		{
			Render();
			blurdist--;// = timer-starttime;
			ShowPage();		
		}

		RemoveHook("DoBlur");
		
		createObjective("getsecuritycard", "Get the security card to unlock the security level.");
		createObjective("getvaultcodes", "Get a passcode to open the elevator to the vault .");
		createObjective("openvault", "Open the vault.");
		createObjective("entervault", "Enter the vault.");
		
		QuickSave();
	}
	
	if(!nFlags[FLAG_MISSION2_HOTEL_GUARDS_SPAWNED])
	{
		AddPreHook("CheckSpawnGuards", 5);	//check if the player killed a civilian or entered the security room. Spawn guards upstairs.
	}
	else
	{
		//remove it if it's already hooked
		RemovePreHook("CheckSpawnGuards");
	}
	
	if(nFlags[FLAG_MISSION2_VAULT_OPEN])
	{
		OpenVaultOBSGFX();
	}
	
	bLoadingGame=0;
}

void InitDoors()
{
	//casino floor
	CreateDoor(37, 23, IS_LoadImage("gfx\\misc\\door.png"), 0-1);	//mens bathroom
	CreateDoor(43, 23, IS_LoadImage("gfx\\misc\\door.png"), 0-1);	//womens bathroom
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO_TO_VALUT] = CreateDoor(72, 37, IS_LoadImage("gfx\\misc\\door.png"), -2);		//vault elevator
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO] = CreateDoor(54, 23, IS_LoadImage("gfx\\misc\\door.png"), -2);		//elevator door
	
	//2nd floor

	CreateDoor(119, 23, IS_LoadImage("gfx\\misc\\door.png"), 300);	//guest room
	CreateDoor(129, 23, IS_LoadImage("gfx\\misc\\door.png"), 300);	//guest room
	CreateDoor(151, 23, IS_LoadImage("gfx\\misc\\door.png"), 200);	//door to the mantience room
	nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_1] = CreateDoor(121, 61, IS_LoadImage("gfx\\misc\\door.png"), -2);	//guest room
	CreateDoor(149, 61, IS_LoadImage("gfx\\misc\\door.png"), 300);	//guest room
	CreateDoor(122, 29, IS_LoadImage("gfx\\misc\\door.png"), 300);	//guest room
	nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_2] = CreateDoor(149, 29, IS_LoadImage("gfx\\misc\\door.png"), -2);	//guest room
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR1] = CreateDoor(144, 23, IS_LoadImage("gfx\\misc\\door.png"), -2);	//elevator door
	
	//3rd floor
	CreateDoor(210, 23, IS_LoadImage("gfx\\misc\\door.png"), 300);
	nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_3] = CreateDoor(220, 23, IS_LoadImage("gfx\\misc\\door.png"), -2);
	CreateDoor(212, 61, IS_LoadImage("gfx\\misc\\door.png"), 300);
	CreateDoor(240, 61, IS_LoadImage("gfx\\misc\\door.png"), 300);
	nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_4] = CreateDoor(213, 29, IS_LoadImage("gfx\\misc\\door.png"), -2);
	CreateDoor(240, 29, IS_LoadImage("gfx\\misc\\door.png"), 300);
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR2] = CreateDoor(235, 23, IS_LoadImage("gfx\\misc\\door.png"), -2);	//elevator door
	
	//security floor
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_SECURITY] = CreateDoor(388, 40, IS_LoadImage("gfx\\misc\\door.png"), -2);	//elevator door
	CreateDoor(368, 52, IS_LoadImage("gfx\\misc\\door.png"), -1);
	CreateDoor(380, 52, IS_LoadImage("gfx\\misc\\door.png"), -1); //door to open all the hotel level doors
	
	//main elevator door
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_MAIN] = CreateDoor(438, 47, IS_LoadImage("gfx\\misc\\door.png"), -2);
	
	//vault
	nFlags[FLAG_MISSION2_ELEVATOR_DOOR_VAULT_TO_CASINO] = CreateDoor(292, 47, IS_LoadImage("gfx\\misc\\door.png"), -2);
}

void InitLoot()
{
	//CreateLoot(23*16, 32*16, "", 0, "", "ElevatorButton");		//not really loot, just the elevator button
	//CreateLoot(110*16, 32*16, "", 0, "", "ElevatorButton");		//not really loot, just the elevator button
	//CreateLoot(201*16, 32*16, "", 0, "", "ElevatorButton");		//not really loot, just the elevator button
	//CreateLoot(388*16, 39*16, "", 0, "", "ElevatorButton");
	
	CreateLoot(71*16, 37*16, "", 0, "", "ValtElevatorPannel", 1);		//digit pad to the vault
	
	//call elevator buttons
	CreateLoot(53*16, 23*16, "", 0, "", "CallElevatorFloorCasino", 1);
	CreateLoot(387*16, 40*16, "", 0, "", "CallElevatorFloorSecurity", 1);
	CreateLoot(143*16, 23*16, "", 0, "", "CallElevatorFloor1", 1);
	CreateLoot(234*16, 23*16, "", 0, "", "CallElevatorFloor2", 1);
	CreateLoot(293*16, 47*16, "", 0, "", "CallElevatorVaultToCasino", 1);
	
	CreateLoot(438*16, 40*16, "", 0, "", "ElevatorInnerButton", 1);		//buttons inside the elevator
	
	
	CreateLoot(395*16, (36*16)-8, "", 0, "", "GenerateValtPassOne", 1);
	CreateLoot(366*16, (36*16)-8, "", 0, "", "GenerateValtPassTwo", 1);
	
	CreateLoot(370*16, 53*16, "", 0, "", "DisableCamerasSecurity", 1);

	//make the room with the card random
	
	int room = random(0, 7);	//7 rooms to choose from
	int x, y;
	
	switch(room)
	{
		case 0:x=114;y=13;
		case 1:x=138;y=18;
		case 2:x=152;y=19;
		case 3:x=140;y=52;
		case 4:x=121;y=36;
		case 5:x=214;y=51;
		case 6:x=229;y=51;
		case 7:x=235;y=31;
	}
	
	CreateLoot(x*16, y*16, "Security Card", 0, "card.png", "GotSecurityCard", 0);
	
	//get the key that opens the locked door in the security room - that room lets you unlock all the hotel level doors
	CreateLoot(26*16, 15*16, "Security Key", 0, "", "UnlockHotelLevelDoors", 0);
	
	//CreateLoot(376*16, 53*16, "", 0, "", "UnlockHotelLevelDoors");
	
	CreateLoot(296*16, 47*16, "", 0, "", "OpenVault", 1);
	
	CreateLoot(38*16, 18*16, "", 0, "paper.png", "VaultCodePaper", 0);
	
	
	//Now for the actuall loot! It only took me ... what...6 months? A year to get this far?
	CreateLoot(223*16, 35*16, "Cash", 100, "cash.png", "", 0);
	CreateLoot(230*16, 31*16, "Cash", 75, "cash.png", "", 0);
	CreateLoot(231*16, 57*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(149*16, 18*16, "Coins", 50, "gold.png", "", 0);
	CreateLoot(119*16, 14*16, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
	CreateLoot(126*16, 13*16, "Vase", 75, "vase.png", "", 0);
	CreateLoot(126*16, 15*16, "Vase", 75, "vase.png", "", 0);
	CreateLoot(154*16, 18*16, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
	CreateLoot(123*16, 53*16, "Coins", 25, "silver.png", "", 0);
	CreateLoot(123*16, 53*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(124*16, 53*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(139*16, 51*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(131*16, 52*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(237*16, 37*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(225*16, 13*16, "Cash", 80, "cash.png", "", 0);
	CreateLoot(47*16, 15*16, "Coins", 25, "gold.png", "", 0);
	
	//top half
	CreateLoot((35*16)+8, 46*16, "Coins", 50, "gold.png", "", 0); 
	CreateLoot((49*16)-8, 52*16, "Coins", 50, "gold.png", "", 0);
	CreateLoot(43*16, 39*16, "Coins", 25, "silver.png", "", 0);
	CreateLoot((39*16)-8, 36*16, "Coins", 25, "silver.png", "", 0);
	CreateLoot(56*16, 52*16, "Coins", 50, "gold.png", "", 0);
	CreateLoot(48*16, 31*16, "Coins", 50, "gold.png", "", 0);
	
	//bottom half
	CreateLoot(31*16, 87*16, "Coins", 75, "gold.png", "", 0);
	CreateLoot(41*16, 88*16, "Coins", 75, "gold.png", "", 0);
	CreateLoot(57*16, (78*16)-4, "Coins", 75, "silver.png", "", 0);
	CreateLoot(37*16, (72*16)-4, "Coins", 75, "silver.png", "", 0);
	CreateLoot(32*16, 90*16, "Coins", 75, "gold.png", "", 0);
	CreateLoot(58*16, (66*16)-4, "Coins", 75, "gold.png", "", 0);
	CreateLoot(30*16, 84*16, "Coins", 75, "gold.png", "", 0);
	CreateLoot(38*16, 86*16, "Coins", 75, "silver.png", "", 0);

	//Vault	
	CreateLoot(305*16, (51*16)-8, "Cash", 150, "cash.png", "", 0);
	CreateLoot(306*16, (51*16)-8, "Cash", 150, "cash.png", "", 0);
	
	CreateLoot(305*16, (46*16)-8, "Cash", 150, "cash.png", "", 0);
	
	CreateLoot(311*16, (51*16)-8, "Cash", 150, "cash.png", "", 0);
	
	CreateLoot(315*16, (51*16)-8, "Cash", 150, "cash.png", "", 0);
	CreateLoot(316*16, (51*16)-8, "Cash", 150, "cash.png", "", 0);
	
	CreateLoot(315*16, (46*16)-8, "Cash", 150, "cash.png", "", 0);
	CreateLoot(316*16, (46*16)-8, "Cash", 150, "cash.png", "", 0);
	
	//CreateLoot(315*16, (40*16)-8, "Cash", 150, "cash.png", "");
	
	CreateLoot(306*16, (40*16)-8, "Cash", 150, "cash.png", "", 0);
	
	//Vault part 2
	CreateLoot(294*16, (122*16)-4, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
	CreateLoot(302*16, 109*16, "Shotgun", 0, "shotgun.png", "GetShotgun", 0);
	CreateLoot(306*16, (105*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(307*16, (101*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(299*16, (101*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(298*16, (101*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(294*16, (105*16)-4, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
	CreateLoot(303*16, (105*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(295*16, (109*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(310*16, (113*16)-4, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
	CreateLoot(314*16, (117*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(310*16, (117*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(302*16, (117*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(295*16, 113*16, "Pistol", 0, "pistol.png", "GetPistol", 0);
	CreateLoot(307*16, (122*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(311*16, (122*16)-4, "Cash", 150, "cash.png", "", 0);
	CreateLoot(295*16, (122*16)-4, "Medkit", 0, "medkit.png", "GetMedkitLoot", 0);
}

void InitLights()
{
	nGlobalLight = 150;
	
	//3rd floor
	AddLight(206*16, 16*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(224*16, 15*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(216*16, 34*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(235*16, 55*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	
	//2nd floor
	AddLight(144*16, 35*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(118*16, 16*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(133*16, 16*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(143*16, 55*16, 8*16, 5*16, LIGHT_TYPE_ROUND);
	
	//Blackjack tables
	AddLight((38*16)+8, (35*16)+8, 80, 64, LIGHT_TYPE_ROUND);
	AddLight((46*16)+8, (31*16)+8, 80, 64, LIGHT_TYPE_ROUND);
	
	//Gents
	AddLight(30*16, 17*16, 208, 64, LIGHT_TYPE_ROUND);
	//Ladies
	AddLight(50*16, 17*16, 208, 64, LIGHT_TYPE_ROUND);
	
	//Slot Machines
	AddLight(55*16, 32*16, 5*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(61*16, 32*16, 5*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(55*16, 51*16, 5*16, 5*16, LIGHT_TYPE_ROUND);
	AddLight(61*16, 51*16, 5*16, 5*16, LIGHT_TYPE_ROUND);
	
	//Elevator
	AddLight(22*16, 36*16, 6*16, 8*16, LIGHT_TYPE_ROUND);
	
}

void InitEnemies()
{
	//vault guard - meh...removed
	//CreateEnemy(72, 38, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_BIGGUARD, "", "guard.chr");
	
	//Casino level civilians
	//top level
	CreateEnemy(47, 30, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(45, 32, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	CreateEnemy(47, 33, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN,  "", "playerm.chr");
	
	CreateEnemy(37, 35, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(37, 38, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	
	CreateEnemy(47, 40, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(45, 42, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(47, 43, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(49, 42, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	
	CreateEnemy(56, 45, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(54, 47, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(58, 47, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	
	//bottom level
	CreateEnemy(39, 87, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(34, 90, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(42, 84, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(42, 90, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	CreateEnemy(30, 90, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	CreateEnemy(39, 90, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(39, 84, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	
	CreateEnemy(37, 67, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "playerm.chr");
	CreateEnemy(36, 65, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(39, 67, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	
	CreateEnemy(56, 67, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	CreateEnemy(56, 65, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	
	CreateEnemy(56, 73, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(56, 71, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CIVILIAN, "", "guy.chr");
	
	//Casino level camera
	CreateEnemy(68, 38, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	
	
	//Level 2 civilians
	CreateEnemy(127, 16, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "playerm.chr");
	CreateEnemy(121, 14, ENTITY_FACE_UP, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "guy.chr");
	CreateEnemy(117, 14, ENTITY_FACE_UP, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "playerm.chr");

	//Level 3 civilians
	CreateEnemy(237, 33, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "playerm.chr");
	
	CreateEnemy(232, 54, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "guy.chr");
	CreateEnemy(237, 54, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "playerm.chr");
	
	CreateEnemy(220, 55, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_CAUTIOUS_CIVILIAN, "", "playerm.chr");
	
	//Security room guards
	CreateEnemy(403, 43, ENTITY_FACE_UP, ENEMY_TEMPLATE_SHOTGUN, "U0W200L0W200D0W200R0W200B", "guard.chr");
	CreateEnemy(372, 43, ENTITY_FACE_UP, ENEMY_TEMPLATE_SHOTGUN, "U0W200L0W200D0W200R0W200B", "guard.chr");
	CreateEnemy(396, 48, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_SHOTGUN, "X409W100Y40W100X396W100Y48W100B", "guard.chr");
	CreateEnemy(380, 40, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_SHOTGUN, "X367W100Y48W100X380W100Y40W100B", "guard.chr");
	
	//Security room civilians
	CreateEnemy(395, 37, ENTITY_FACE_UP, ENEMY_TEMPLATE_PISTOL, "W500X409U0W500X395U0B", "guard.chr");
	CreateEnemy(366, 37, ENTITY_FACE_UP, ENEMY_TEMPLATE_PISTOL, "W500X380U0W500X366U0B", "guard.chr");

	//Security room cameras
	//Right side
	CreateEnemy(411, 39, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(394, 39, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(403, 55, ENTITY_FACE_UP, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	
	//Left side
	CreateEnemy(382, 39, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(365, 39, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	//CreateEnemy(373, 55, ENTITY_FACE_UP, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	
	//Outside vault
	//gun cameras
	CreateEnemy(300, 53, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(310, 64, ENTITY_FACE_UP, ENEMY_TEMPLATE_GUN_CAMERA, "", "camera.chr");
	CreateEnemy(318, 61, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_GUN_CAMERA, "", "camera.chr");
	CreateEnemy(318, 52, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_GUN_CAMERA, "", "camera.chr");
	CreateEnemy(303, 52, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_GUN_CAMERA, "", "camera.chr");
	
	//chip turn in people
	CreateEnemy(73, 77, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
	CreateEnemy(76, 77, ENTITY_FACE_UP, ENEMY_TEMPLATE_CIVILIAN, "", "dealer.chr");
}

void UnlockHotelLevelDoors()
{
	//OpenMessageMenu("Hotel level doors unlocked!");
	
	ManualUnlockDoor(nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_1]);
	ManualUnlockDoor(nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_2]);
	ManualUnlockDoor(nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_3]);
	ManualUnlockDoor(nFlags[FLAG_MISSION2_LOCKED_HOTEL_DOOR_4]);
	
	CommText("Tech: That looks like the hotel master key. I'll bet you it'll be able to open the doors you couldn't pick.");
}

void CheckSpawnGuards()
{
	int i;
	
	int spawn = 0;
	
	for(i=0;i<nNumEnemies;i++)
	{
		if(Enemies[i].nHp<=0)
			spawn=1;
	}
	
	if(spawn)
	{
		SpawnHotelLevelGuards();
		nFlags[FLAG_MISSION2_HOTEL_GUARDS_SPAWNED] = 1;
	}
}

void SpawnHotelLevelGuards()
{
	RemovePreHook("CheckSpawnGuards");
	
	//cut scene to show that the guards are spawing

	//take control from player
	SetEntitiesPaused(1);
	cameratracking = 0;
	bCanSave = 0;
	bCanOpenInGameMenu = 0;
	
	//fade out
	FadeOutExclusive(100, RGB(0, 0, 0));
	//move to top of level 3
	xwin = 240 * 16;
	ywin = 23 * 16;
	//start transparent static
	StartStatic();
	nStaticLuc = 90;
	
	//spawn guards
	
	//Level 2 guards
	CreateEnemy(207, 63, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y26W60Y63W60B", "guard.chr");
	CreateEnemy(207, 25, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "X245W60X207W60B", "guard.chr");
	CreateEnemy(245, 26, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y26W60Y63W60B", "guard.chr");
	CreateEnemy(245, 63, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "X207W60X245W60B", "guard.chr");

	//level 2 cameras
	/*CreateEnemy(115, 24, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(155, 63, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");*/

	//Level 3 guards
	CreateEnemy(116, 63, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y26W60Y63W60B", "guard.chr");
	CreateEnemy(116, 25, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "X154W60X116W60B", "guard.chr");
	CreateEnemy(154, 26, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y26W60Y63W60B", "guard.chr");
	CreateEnemy(154, 63, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "X154W60X116W60B", "guard.chr");
	
	//casino level guards
	CreateEnemy(65, 58, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y24X28Y58Y24X65Y58B", "guard.chr");
	CreateEnemy(28, 60, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "Y94X65Y60Y94X28Y60B", "guard.chr");
	
	//level 3 cameras
	/*CreateEnemy(206, 24, ENTITY_FACE_RIGHT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");
	CreateEnemy(246, 63, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_CAMERA, "", "camera.chr");*/
	
	//fade in
	FadeInExclusive(100, RGB(0, 0, 0));
	
	//dialog -_-
	CommText("Security: All units; Code orange.");
	
	//slide for a bit
	CameraScroll(240 * 16, 56 * 16, 400);

	//wait for the text
	nHoldCommText = 1;
	WaitForCommText();
	nHoldCommText = 0;
	WaitForCameraScroll();
	
	//more slide!
	CameraScroll(203 * 16, 56 * 16, 400);
	
	CommText("Security: Target is a male, wearing a blue jumpsuit with a black backpack.");

	//wait for the text
	nHoldCommText = 1;
	WaitForCommText();
	nHoldCommText = 0;
	WaitForCameraScroll();
	
	CameraScroll(203 * 16, 23 * 16, 400);
	
	CommText("Security: Subject is armed and dangerous. Orders are shoot on sight.");

	//wait for the text
	nHoldCommText = 1;
	WaitForCommText();
	nHoldCommText = 0;
	WaitForCameraScroll();

	//fade out
	FadeOutExclusive(100, RGB(0, 0, 0));
	cameratracking = 1;
	
	//turn off static
	RemoveStatic();
	
	FadeInExclusive(100, RGB(0, 0, 0));
	
	//restore control to player
	SetEntitiesPaused(0);
	bCanSave = 1;
	bCanOpenInGameMenu = 1;
}

void SecurityAutoSave()
{
	if(!nFlags[FLAG_MISSION2_HOTEL_GUARDS_SPAWNED])
	{
		SpawnHotelLevelGuards();
		nFlags[FLAG_MISSION2_HOTEL_GUARDS_SPAWNED] = 1;
	}
}

void InitAutoSave()
{
	//CreateAutoSave(3);	//Enter
	CreateAutoSave(7);
	CreateAutoSave(8);
	CreateAutoSave(9);
	CreateAutoSave(10);
}

void InitAmbientSounds()
{
	//computers in security room
	CreateAmbientSound(399*16, 35*16, "sounds\\ambient\\computer2.wav", 1000, 200);
	CreateAmbientSound(406*16, 35*16, "sounds\\ambient\\computer2.wav", 3000, 200);
	
	CreateAmbientSound(377*16, 35*16, "sounds\\ambient\\computer2.wav", 1000, 200);
	CreateAmbientSound(470*16, 35*16, "sounds\\ambient\\computer2.wav", 3000, 200);
	
	//slot machines
	CreateAmbientSound(30*16, 83*16, "sounds\\ambient\\slotmachine.wav", 1500, 100);
	CreateAmbientSound(39*16, 83*16, "sounds\\ambient\\slotmachine.wav", 1300, 100);
	
	CreateAmbientSound(36*16, 89*16, "sounds\\ambient\\slotmachine.wav", 500, 100);
	CreateAmbientSound(42*16, 89*16, "sounds\\ambient\\slotmachine.wav", 800, 100);

	CreateAmbientSound(33*16, 86*16, "sounds\\ambient\\slotmachine.wav", 1600, 100);
	CreateAmbientSound(30*16, 89*16, "sounds\\ambient\\slotmachine.wav", 1400, 100);
}

//Functions to do the rstring changing. Above the railing, below the railing voodoo
void EnterFloor()
{
	ChangeRString("1,2,E,5,3,4,R");
}

void LeaveFloor()
{
	ChangeRString("1,2,5,E,3,4,R");
}

void CloseElevatorDoors()
{
	//doors are closing. *ding dong*
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR2]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR1]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_SECURITY]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_MAIN]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO_TO_VALUT]);
	ManualCloseDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_VAULT_TO_CASINO]);
}

//helper functions for each floor for CallElevator()
void CallElevatorFloorSecurity()
{
	CallElevator(1);
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevatorFloorCasino()
{
	CallElevator(2);
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevatorFloor1()
{
	CallElevator(3);
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevatorFloor2()
{
	CallElevator(4);
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevatorCasinoToValut()
{
	CallElevator(5);
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevatorVaultToCasino()
{
	if(nFlags[FLAG_MISSION2_CAN_LEAVE])
	{
		CallElevator(6);
	}
	else
	{
		OpenMessageMenu("Out of order. Maintence has been notified.");
	}
	
	Loots[nCurrentLoot].nStolen = 0;
}

void CallElevator(int floor)
{
	//if evevator isn't on it's way already
	if(!IsDelayedCallbackActive("CallElevatorCallback") && !IsDelayedCallbackActive("ElevatorLeaveCallback"))
	{
		error("It's comming up...");
		
		//play the elevator call sound
		SoundElevatorCall();

		//flag what floor we are going to
		nFlags[FLAG_MISSION2_ELEVATOR_GOING_TO_FLOOR] = floor;
		
		//wait some amount of time between X and Y seconds
		//setup the callback!
		CreateDelayedCallback(random(200, 500), "CallElevatorCallback");
	}
}

void CallElevatorCallback()
{
	int floor = nFlags[FLAG_MISSION2_ELEVATOR_GOING_TO_FLOOR];

	error("It's there!");

	//play the elevator arrived sound
	SoundElevatorHere();
	
	//open the elevator door for this floor
	if(floor == 1)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_SECURITY]);
	else if(floor == 2)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO]);
	else if(floor == 3)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR1]);
	else if(floor == 4)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_FLOOR2]);
	else if(floor == 5)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_CASINO_TO_VALUT]);
	else if(floor == 6)
		ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_VAULT_TO_CASINO]);
		
	//set the flag for the elevator
	nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = floor;
	
	//setup a call back to make the elevator leave this floor after a while
	CreateDelayedCallback(random(500, 1000), "ElevatorLeaveCallback");
}

void ElevatorLeaveCallback()
{
	//makes the elevator leave the current level
	CloseElevatorDoors();
	
	SoundElevatorHere();
	
	nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = -1;
}

//calls when the user warps to the inside of the elevator
void ElevatorEnter()
{
	FreeDelayedCallbackByFunction("ElevatorLeaveCallback");	//remove the callback that would make the elevator leave
	
	FadeOutExclusive(50, RGB(0, 0, 0));
	Warp(438, 43);

	//close all the elevator doors
	CloseElevatorDoors();

	FadeInExclusive(50, RGB(0, 0, 0));
}

void ElevatorExit()
{
	FadeOutExclusive(50, RGB(0, 0, 0));

	switch(nFlags[FLAG_MISSION2_ELEVATOR_FLOOR])
	{
		case 1:	//security
			Warp(388, 41);
		case 2:	//casino floor
			Warp(54, 24);
		case 3:	//2nd floor
			Warp(144, 24);
		case 4:	//3rd floor
			Warp(235, 24);
		case 5: //vault
			Warp(292, 48);
		case 6: //casino from the vault
			Warp(72, 38);
	}

	FadeInExclusive(50, RGB(0, 0, 0));
}

//called when the user opens uses the button inside the elevator
void ElevatorInnerButton()
{
	int opening = 1;
	int choice;
	
	//if the elevator isn't already moving
	if(!IsDelayedCallbackActive("InnerElevatorCallback"))
	{
		if(nFlags[FLAG_MISSION2_ELEVATOR_FLOOR]==5)	//player is going down to the vault
		{
			choice = 4;
		}
		else if(nFlags[FLAG_MISSION2_ELEVATOR_FLOOR]==6)	//player is going from the vault back to the casino
		{
			choice = 5;
		}
		else
		{
			//open a menu listing all the floors
			choice = OpenChoiceMenu(130, 80, "3nd Floor|2rd Floor|Casino Floor|Security", "Elevator");	
		}	

		//change flag to the floor the user chose
		if(choice == 0)		//3rd floor
		{
			nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 4;
		}
		else if(choice == 1)		//2nd floor
		{
			nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 3;
		}
		else if(choice == 2)		//casino floor
		{
			nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 2;
		}
		else if(choice == 3)		//security
		{
			if(!nFlags[FLAG_MISSION2_SECURITYCARD])
			{
				SoundError();
				OpenMessageMenu("NO ACCESS");
				opening=0;
			}
			else
			{
				nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 1;
			}
		}
		else if(choice == 4)	//to vault
		{
			nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 5;
		}
		else if(choice == 5)	//from vault
		{
			nFlags[FLAG_MISSION2_ELEVATOR_FLOOR] = 6;
		}

		if(opening)
		{
			CloseElevatorDoors();
			CreateDelayedCallback(random(200, 500), "InnerElevatorCallback");
			SoundElevatorCall();
			StartShake(1, 20);	//do the shakey!
		}
		
		if(choice == 0)
		{
			//if ghost has killed the first set of boss characters, spawn one as he rides up the elevator
			if(nFlags[FLAG_MISSION2_VAULT_TRIGGER] == 2)
			{
				//setup a timed callback to do teh spawnin
				CreateDelayedCallback(100, "SpawnTKElevator");

				nFlags[FLAG_MISSION2_VAULT_TRIGGER] == 3;
			}

		}
	}
	Loots[nCurrentLoot].nStolen = 0;	//so that we can press this more then once
}

void InnerElevatorCallback()
{
	SoundElevatorHere();
	//open the elevator door
	ManualOpenDoor(nFlags[FLAG_MISSION2_ELEVATOR_DOOR_MAIN]);
	StartShake(1, 20);	//more shakey
}

void SpawnTKElevator()
{
	//do a TK spawn effect
	nFlags[FLAG_MISSION2_BOSS_ENT3] = CreateEnemy(438, 43, ENTITY_FACE_UP, ENEMY_TEMPLATE_PISTOL, "", "tk.chr");
	
	SoundGrenade();
	FadeInExclusive(200, RGB(255, 255, 255));

	//prevent tranqing
	Enemies[nFlags[FLAG_MISSION2_BOSS_ENT3]].bCanBeTranqd = 0;
}

//function called when player gets the security card
void GotSecurityCard()
{
	nFlags[FLAG_MISSION2_SECURITYCARD] = 1;
	completeObjective("getsecuritycard");
}

//generate passcode part one for vault elevator
void GenerateValtPassOne()
{
	if(nFlags[FLAG_MISSION2_VAULTCODE_1_SET] == 0)
	{
		nFlags[FLAG_MISSION2_VAULTCODE_1] = random(0, 99);
		nFlags[FLAG_MISSION2_VAULTCODE_1_SET] = 1;
		OpenMessageMenu("Vault Code part 1: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_1]));
		AddNote("Passcode for elevator to vault part 1: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_1]));
		
		if(nFlags[FLAG_MISSION2_VAULTCODE_2_SET])
			completeObjective("getvaultcodes");
	}
	else
	{
		OpenMessageMenu("Vault Code part 1: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_1]));
	}
	Loots[nCurrentLoot].nStolen = 0;
}

void GenerateValtPassTwo()
{
	if(nFlags[FLAG_MISSION2_VAULTCODE_2_SET] == 0)
	{
		nFlags[FLAG_MISSION2_VAULTCODE_2] = random(0, 99);
		nFlags[FLAG_MISSION2_VAULTCODE_2_SET] = 1;
		OpenMessageMenu("Vault Code part 2: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_2]));
		AddNote("Passcode for elevator to vault part 2: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_2]));

		if(nFlags[FLAG_MISSION2_VAULTCODE_1_SET])
			completeObjective("getvaultcodes");
	}
	else
	{
		OpenMessageMenu("Vault Code part 2: " + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_2]));
	}
	Loots[nCurrentLoot].nStolen = 0;
}

void ValtElevatorPannel()
{
	if(nFlags[FLAG_MISSION2_VAULTCODE_1_SET] && nFlags[FLAG_MISSION2_VAULTCODE_2_SET] && strcmp(MenuDigitPad(4), TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_1]) + TwoDigit(nFlags[FLAG_MISSION2_VAULTCODE_2]))==0)
	{
		OpenMessageMenu("Passcode correct!");
		CallElevatorCasinoToValut();
	}
	else
	{
		SoundError();
		OpenMessageMenu("Passcode INCORRECT!");
	}
	Loots[nCurrentLoot].nStolen = 0;
}

void OpenVault()
{
	if(strcmp(MenuDigitPad(6), "109756")==0)
	{
		OpenMessageMenu("Passcode correct!");
		//open sesame
		
		//Do a shake. Cause you know. The world always shakes when a big door opens.
		StartShake(3, 100);
		
		OpenVaultOBSGFX();
		
		SoundBigMetalDoor();
		
		nFlags[FLAG_MISSION2_VAULT_OPEN] = 1;
		
		completeObjective("openvault");
	}
	else
	{
		SoundError();
		OpenMessageMenu("Passcode INCORRECT!");
		Loots[nCurrentLoot].nStolen = 0;
	}
}

//sets the obstructions and tiles to allow the player into the vault
void OpenVaultOBSGFX()
{
	//move obs around to let player walk in
	SetObs(309, 58, 0);
	SetObs(310, 58, 0);
	SetObs(309, 55, 0);
	SetObs(310, 55, 0);

	SetObs(311, 56, 1);
	SetObs(311, 57, 1);

	SetObs(308, 56, 1);
	SetObs(308, 57, 1);

	SetObs(308, 54, 3);
	SetObs(311, 58, 3);

	SetObs(308, 58, 3);
	SetObs(311, 55, 3);
	
	//set tiles
	SetTile(308, 55, 3, 319);
	SetTile(309, 55, 3, 320);
	SetTile(310, 55, 3, 321);
	SetTile(311, 55, 3, 322);
	
	SetTile(308, 56, 3, 323);
	SetTile(309, 56, 3, 324);
	SetTile(310, 56, 3, 325);
	SetTile(311, 56, 3, 326);
	
	SetTile(308, 57, 1, 327);
	SetTile(309, 57, 1, 328);
	SetTile(310, 57, 1, 329);
	SetTile(311, 57, 1, 330);
	
	SetTile(308, 58, 1, 331);
	SetTile(309, 58, 1, 332);
	SetTile(310, 58, 1, 333);
	SetTile(311, 58, 1, 334);
}

void VaultCodePaper()
{	
	//reveals the code to the vault
	OpenMessageMenu("Vault code: 109756");
	AddNote("Passcode for vault: 109756");
}

void DisableCamerasSecurity()
{
	//Disables all cameras for 1 minute
	DisableCameras(6000);
	Loots[nCurrentLoot].nStolen = 0;
}

//checks and sets a flag as necessary. This flag will spawn the TK when the player tries to leave the vault area.
void VaultTrigger()
{
	if(!nFlags[FLAG_MISSION2_VAULT_TRIGGER])
	{
		nFlags[FLAG_MISSION2_VAULT_TRIGGER] = 1;
		completeObjective("entervault");
	}
}

//if the flag is already set, does the TK intro and spawns the first boss. Two big guys with guns.
void SpawnTK()
{
	//disable saving for the boss fight
	if(nFlags[FLAG_MISSION2_VAULT_TRIGGER] == 1)
	{
		bCanSave = 0;
		nHoldCommText = 1;
	
		//pause enemies
		vcTimer[TIMER_ENEMY_LOGIC].nPause = 1;
		
		nFlags[FLAG_MISSION2_BOSS_ENT] = CreateEnemy(293, 53, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "", "tk.chr");
		nFlags[FLAG_MISSION2_BOSS_ENT2] = CreateEnemy(297, 53, ENTITY_FACE_DOWN, ENEMY_TEMPLATE_PISTOL, "", "tk.chr");
		
		//prevent tranqing
		Enemies[nFlags[FLAG_MISSION2_BOSS_ENT]].bCanBeTranqd = 0;
		Enemies[nFlags[FLAG_MISSION2_BOSS_ENT2]].bCanBeTranqd = 0;

		//play the totally cracked out boss music!
		MusicSwitch("boss.mod", 5);

		//do the teleport in effect!
		SoundTeleport();
		CrossFade(200);

		nFlags[FLAG_MISSION2_VAULT_TRIGGER] = 2;
		
		CommText("Time Keeper: Freeze.");
		CommText("Ghost: What the...");
		CommText("Time Keeper: You are in violation of temporal code 1186. You my choose to go into custody, or you will be killed.");
		CommText("Time Keeper: I would truly prefer the latter.");
		CommText("Tech: Just speaking for my self, but I would truly perfer neither.");
		CommText("Tech: I'm not sure who they are, but I suggest you get out off their quick so we can figure this out once you're back.");
		CommText("Time Keeper: Not going quietly...Ok then. Just makes my job more intersting.");
		

		SetEntitiesPaused(1);
		WaitForCommText();
				
		nHoldCommText = 0;
		
		//do the flash bang effect!
		SoundGrenade();
		FadeOutExclusive(20, RGB(255, 255, 255));
				
		//wait 20 ticks before doing the fade in
		//CreateDelayedCallback(20, "SpawnTKMidFlashBang");
		SpawnTKMidFlashBang();
	}
}


void SpawnTKMidFlashBang()
{
	//move the player
	entity.x[nPlayerEnt] = (295*16)+8;
	entity.y[nPlayerEnt] = 63*16;
	entity.face[nPlayerEnt] = 1;
	
	FadeInExclusive(300, RGB(255, 255, 255));
	
	//wait 300 ticks before releasing the player and starting the boss fight
	//CreateDelayedCallback(250, "SpawnTKEndFlashBang");
	SpawnTKEndFlashBang();
}

void SpawnTKEndFlashBang()
{
	SetEntitiesPaused(0);

	//unpause enemies
	vcTimer[TIMER_ENEMY_LOGIC].nPause = 0;

	MakeAlert(nFlags[FLAG_MISSION2_BOSS_ENT]);
	MakeAlert(nFlags[FLAG_MISSION2_BOSS_ENT2]);
	
	createObjective("surviveambush", "Survive the ambush!");
	createObjective("getoutalive", "Get to the extration point alive.");
	
	AddHook("TKDeadCheck", 5);
}

void TKDeadCheck()
{
	if(Enemies[nFlags[FLAG_MISSION2_BOSS_ENT]].nHp <= 0 && Enemies[nFlags[FLAG_MISSION2_BOSS_ENT2]].nHp <= 0)
	{
		bCanSave = 1;	//enable saving after bossfight
		
		CompleteObjective("surviveambush");
		
		//set flag before saving
		nFlags[FLAG_MISSION2_CAN_LEAVE] = 1;
		
		//save after killing the boss
		QuickSave();

		CommText("Tech: They're down. Get back to the insertion point quick...we don't want any more company");
		CommText("Ghost: Easy as cake right?");
		CommText("Tech: Yeah..found cake.");

		RemoveHook("TKDeadCheck");
	}
}

void Mission2Over()
{
	if(nFlags[FLAG_MISSION2_CAN_LEAVE])
	{
		nFlags[FLAG_MISSION2_COMPLETE] = 1;
		
		//2min 30sec
		if(vcTimer[TIMER_MISSION_TIME_SPENT].nTick <= 15000)
			AchivementUnlocked(ACHIVEMENT_SPEED_RUN2);
		
		CompleteObjective("getoutalive");
		
		//send tracked stats to the server
		OpenMenuScore(0);

		TimeWarp("0|", "base.map");
	}
}

//spawns more enemies on the casino after player leaves the vault
void SpawnTK2()
{
	if(nFlags[FLAG_MISSION2_CAN_LEAVE] && !nFlags[FLAG_MISSION2_SPAWN_CASINO_TK])
	{
		//pause enemies
		vcTimer[TIMER_ENEMY_LOGIC].nPause = 1;
		
		CreateEnemy(71, 41, ENTITY_FACE_LEFT, ENEMY_TEMPLATE_PISTOL, "", "tk.chr");
	
		nHoldCommText = 1;
		
		SoundTeleport();
		CrossFade(200);
		
		entity.face[nPlayerEnt] = ENTITY_FACE_RIGHT;

		CommText("Time Keeper: Hold it!");
		CommText("Ghost: Crap! I don't have time for this!");

		//SetEntitiesPaused(1);
		WaitForCommText();
		//SetEntitiesPaused(0);
		nHoldCommText = 0;
		
		//unpause enemies
		vcTimer[TIMER_ENEMY_LOGIC].nPause = 0;
		
		nFlags[FLAG_MISSION2_SPAWN_CASINO_TK] = 1;
	}
}

void ToLowerVault()
{
	FadeOutExclusive(50, RGB(0, 0, 0));
	Warp(316, 101);
	FadeinExclusive(50, RGB(0, 0, 0));
}

void ToUpperVault()
{
	FadeOutExclusive(50, RGB(0, 0, 0));
	Warp(318, 38);
	FadeInExclusive(50, RGB(0, 0, 0));
}