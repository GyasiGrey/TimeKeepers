/*
	Feyr
	kevinhobbs@gmail.com
	hook.vc version 1
	10/1/2004
	
	Change: 1/31/05 Ness - Added dual retrace technology
	Functions called at the first retrace are prefaced with PRE_
	Call StartDualRetraceMode() to start Dual Mode
*/

string hook_hooks[NUM_HOOKS];
int hook_priorities[NUM_HOOKS];

int nDualCounter; //==0 if on the first retrace, ==1 on the second

int nTick;

void HookSetup() {
	nTick = 0;
	HookRetrace("HookCaller");
}

void HookShutdown() {
	HookRetrace("");
}

int NextFreeHook() {
   int i;
   for(i=0;i<NUM_HOOKS;i++) {
      if(!strcmp(hook_hooks[i], "")) { return i; }
   }
   return 0-1;
}

int AddHook(string hook, int priority) {
   int i;
   if(priority >= HOOK_MAX_PRIORITY)
		priority = HOOK_MAX_PRIORITY - 1;
   i = NextFreeHook();
   if(i == 0-1) {
      Error("hook.vc: Error: Not enough free hooks in hook.vc:AddHook("+hook+")");
      return 0;
   }
   hook_hooks[i] = hook;
   hook_priorities[i] = priority;
   Error("Added hook: "+hook+" at position "+str(priority));
   SortHooksReverse();
}

//Ness - Add a hook to the first retrace. Yeah you could just call AddHook()
//and put PRE_ before your func, but this is easier
int AddPreHook(string hook, int priority) {
   int i;
   if(priority >= HOOK_MAX_PRIORITY)
		priority = HOOK_MAX_PRIORITY - 1;
   i = NextFreeHook();
   if(i == 0-1) {
      Error("hook.vc: Error: Not enough free hooks in hook.vc:AddHook("+hook+")");
      return 0;
   }
   hook_hooks[i] = "PRE_"+hook;	//Ness - only changed line HAH!
   hook_priorities[i] = priority;
   Error("Added hook: "+hook+" at position "+str(priority));
   SortHooksReverse();
}

void SortHooksReverse() {
   int i;
   string tmp;
   int tmpi;
   for(i = NUM_HOOKS-1;i>0;i--) {
      if(!strcmp(hook_hooks[i], "")) {
         hook_priorities[i] = HOOK_MAX_PRIORITY;
      }
      if(!strcmp(hook_hooks[i-1],"")) {
         hook_priorities[i-1] = HOOK_MAX_PRIORITY;
      }
      if(hook_priorities[i] < hook_priorities[i-1]) {
         tmp = hook_hooks[i];
         hook_hooks[i] = hook_hooks[i-1];
         hook_hooks[i-1] = tmp;

         tmpi = hook_priorities[i];
         hook_priorities[i] = hook_priorities[i-1];
         hook_priorities[i-1] = tmpi;
      }
   }
}

void SortHooks() {
   int i;
   string tmp;
   int tmpi;
   for(i=1;i<NUM_HOOKS;i++) {
      if(!strcmp(hook_hooks[i], "")) {
         hook_priorities[i] = HOOK_MAX_PRIORITY;
      }
      if(!strcmp(hook_hooks[i-1],"")) {
         hook_priorities[i-1] = HOOK_MAX_PRIORITY;
      }
      if(hook_priorities[i] < hook_priorities[i-1]) {
         tmp = hook_hooks[i];
         hook_hooks[i] = hook_hooks[i-1];
         hook_hooks[i-1] = tmp;

         tmpi = hook_priorities[i];
         hook_priorities[i] = hook_priorities[i-1];
         hook_priorities[i-1] = tmpi;
      }
   }
}

void RemoveHook(string hook) {
   int i,count;
   for(i=0;i<NUM_HOOKS;i++) {
      if(!strcmp(hook_hooks[i],hook)) {
         Error("Removed hook "+hook+" at position "+str(hook_priorities[i]));
         hook_hooks[i] = "";
         hook_priorities[i] = HOOK_MAX_PRIORITY;
         count += 1;
      }
   }

   for(i=0;i<count;i++) {
      SortHooks();
   }
}

void RemovePreHook(string hook) {
   int i,count;
   hook = "PRE_" + hook;
   for(i=0;i<NUM_HOOKS;i++) {
      if(!strcmp(hook_hooks[i],hook)) {
         Error("Removed hook "+hook+" at position "+str(hook_priorities[i]));
         hook_hooks[i] = "";
         hook_priorities[i] = HOOK_MAX_PRIORITY;
         count += 1;
      }
   }

   for(i=0;i<count;i++) {
      SortHooks();
   }
}

void RemoveHookPriority(int pri) {
	int i, count;
	for(i=0;i<NUM_HOOKS;i++) {
		if(hook_priorities[i] == pri) {
			hook_hooks[i] = "";
			hook_priorities[i] = HOOK_MAX_PRIORITY;
			count += 1;
		}
	}
	for(i=0;i<count;i++) {
		SortHooks();
	}
}

void PrintHooks() {
   string msg;
   int i,j;
   for(i=0;i<NUM_HOOKS-5;i+=5) {
      msg="";
      for(j=0;j<5;j++) {
         msg = msg + "(" + hook_hooks[i+j] + ")  ";
      }
      Error(msg);
//      debug_win_Log(msg);
   }
}

//Ness: Added dual retrace technology
//and I changed the formating so that I could read it :p
void HookCaller()
{
	int i;
	
	nTick++;
	//messagebox("nDualCounter " + str(nDualCounter));
	for(i=0;i<NUM_HOOKS;i++)
	{
		if(hook_priorities[i] >= HOOK_MAX_PRIORITY)
		{
			//end of the retrace list. switch the retrace func
			//note that this branch is always called so code after
			//the for loop will never be called
			if(nDualCounter == 0)
			{
				nDualCounter = 1;
			}
			else
			{
				nDualCounter = 0;
			}
			return;
		}
			
		//if this is a PRE_ func and we are on the first retrace call it (sans the PRE_)
		if(nDualCounter==0 && !strcmp(left(hook_hooks[i], 4), "PRE_")) //this line sucks because I can't read it
		{
	//		Error("pre func " + right(hook_hooks[i], len(hook_hooks[i])-4));
			CallFunction(right(hook_hooks[i], len(hook_hooks[i])-4));
		}
		else if(nDualCounter==1 && strcmp(left(hook_hooks[i], 4), "PRE_"))
		{
	//		Error("post func " + hook_hooks[i]);
			CallFunction(hook_hooks[i]);
		}
	}
}


//Ness: Finds the E (entity) part of the current render string
//and puts an R (first retrace) before it.
//in maped the retrace layer should ALWAYS be the last layer
void StartDualRetraceMode()
{
	int index;
	string tmp = curmap.rstring;	//curmap.rstring is about to get molested
	

	//find the first instance of the entity layer
	index = strat("E", tmp, 0);
	
	//cut it open, put an R in there and stitch it back together
	tmp = left(tmp, index) + "R," + right(tmp, len(tmp)-index);
	
	//set the new rstring
	curmap.rstring = tmp;
	
	nDualCounter = 0;
	
	Error("DualMode started - New rstring " + tmp);
}

//Ness: returns 1 if the function passed is already hooked
int IsHooked(string func)
{
	int i;
	
	for(i=0;i<NUM_HOOKS;i++)
	{
		if(!strcmp(hook_hooks[i], func))
			return 1;
	}
	
	return 0;
}

//Ness: empties the hook queue.
void EmptyHookQueue()
{
	int i;
	
	for(i=0;i<NUM_HOOKS;i++)
	{
		hook_hooks[i] = "";
		hook_priorities[i] = HOOK_MAX_PRIORITY;
	}
}

int nStoredDualCounter;

void StoreDualCounter()
{
	nStoredDualCounter = nDualCounter;
}

void RestoreDualCounter()
{
	nDualCounter = nStoredDualCounter;
}