#define _ISIGN  & 2147483648 / 1073741824 + 1 //for finding abs - yay for maths!

//finds the abs value. credit: Zip
//abs() is a builtin now :(
/*int abs (int number)
{
	return number * (number _ISIGN);
}*/

//finds the distance between 2 ents using a^2 + b^2 = c^2
int Distance(int ent1, int ent2)
{	

	//find the middle of the ent's hotspot
	int xpt1 = entity.x[ent1] + (entity.hotw[ent1]/2);
	int ypt1 = entity.y[ent1] + (entity.hoth[ent1]/2); 
	
	int xpt2 = entity.x[ent2] + (entity.hotw[ent2]/2);
	int ypt2 = entity.y[ent2] + (entity.hoth[ent2]/2); 
	
	return DistanceXY(xpt1, ypt1, xpt2, ypt2);
	
}

int DistanceXY(int x1, int y1, int x2, int y2)
{
	//square and get the abs val of the x and y distances
	int xdist = Abs((x1 - x2)*(x1 - x2));

	int ydist = Abs((y1 - y2)*(y1 - y2));
	
	//return the final value

	return sqrt(xdist + ydist);
}

int zatan2(int y, int x)
{
	int t;
	if(x = 0)
	{
		if(y>0) return 90;
		else return 270;
	}
	if(y = 0)
	{
		if(x < 0) return 180;
		else return 0;
	}
	t = atan((y*65536)/x);

	if(x>0 && y < 0) return t + 360;
	if(x<0) return t + 180;

	return t;
}

string _WrapText(int wt_font, string wt_s, int wt_linelen)
// Pass: The font to use, the string to wrap, the length in pixels to fit into
// Return: The passed string with | characters inserted as breaks
// Assmes: The font is valid, and will overrun if a word is longer than linelen
// Note: Existing breaks will be respected, but adjacent | characters will be
//     replaced with a single | so add a space for multiple line breaks
// Credit: Zip
{
   int wt_i;
   string wt_tpara = "";
   string wt_tline = "";
   string wt_output = "";
   int wt_breaks = TokenCount(wt_s, "|");
   while (len(wt_s))
   {
      wt_tpara = GetToken(wt_s, "|", 0);
      wt_s = right(wt_s, len(wt_s) - len(wt_tpara) - 1);
      if (TextWidth(wt_font, wt_tpara) < wt_linelen)
      {
         wt_output = wt_output + wt_tpara + "|";
      }
      else
      {
         while (len(wt_tpara))
         {
            wt_tline = wt_tline + GetToken(wt_tpara, " ", 0);
            wt_tpara = right(wt_tpara, len(wt_tpara) - len(GetToken(wt_tpara, " ", 0)) - 1);
            if (TextWidth(wt_font, wt_tline + GetToken(wt_tpara, " ", 0) + " ") > wt_linelen)
            {
               wt_output = wt_output + wt_tline + "|";
               wt_tline = "";
            }
            else wt_tline = wt_tline + " ";
         }
         if (len(wt_tline))
         {
            wt_output = wt_output + left(wt_tline, len(wt_tline) - 1) + "|";
            wt_tline = "";
         }
      }
   }
   return wt_output + "|"; // Double "||" to terminate
}

void PrintMultiLineString(int _x, int _y, string text, int fnt, int dest)
{
	int x, y, pos;
	
	x = _x;
	y = _y;
	pos = 0;
	
	while(pos < len(text))
	{
		//if we got a line break increment the y
		if(!strcmp(mid(text, pos, 1), "|"))
		{
			y+=FontHeight(fnt)+1;
			x=_x;
		}
		else
		{
			PrintString(x, y, dest, fnt, mid(text, pos, 1));
			x+=TextWidth(fnt, mid(text, pos, 1));
		}
		pos++;
	}
}

int strstr(string sub, string source)
// Pass: The sub string to looks for, the source string to search through
// Return: The number of sub strings found
// Assmes:
// Note: If searching for two spaces, four spaces together will count as 3 instances
// Credit: Zip
{
	int i;
	int count = 0;
	int lensub = len(sub);
	int lensource = len(source);
	for (i = 0; i < lensource; i++)
	{
		if (!strcmp(sub, mid(source, i, lensub))) count++;
	}
	return count;
}

int strat(string sub, string source, int instances)
// Pass: The sub string to look for, the source string to search through, the instance to look for
// Return: The location of the substring this instance was found at
// Credit: Gyasi I guess...
{
	int i;
	int count = 0;
	int lensub = len(sub);
	int lensource = len(source);
	for (i = 0; i < lensource; i++)
	{
		if (!strcmp(sub, mid(source, i, lensub)))
		{
			//if were at the right number of instances return this index
			if(count == instances)
			{
				return i;
			}

			count++;			
		}
	}
}

//if there is an entity with x and y in it's hotspot, it returns that ent
//else return 0-1
int EntityAt(int x, int y)
{
	int i;
	
	for(i=0;i<entities;i++)
	{
		if(x >= entity.x[i] && x <= entity.x[i]+entity.hotw[i])
		{
			if(y >= entity.y[i] && y <= entity.y[i]+entity.hoth[i])
			{
				//good coding practice be damed!
				return i;
			}
		}
	}
	
	return 0-1;
}

string GetTime12String()
{
	string hour, minute, second;
	string ampm;
	
	if(systime.hour == 12)
	{
		hour = str(systime.hour);
		ampm = "PM";
	}
	else if(systime.hour > 12)
	{
		hour = str(systime.hour-12);
		ampm = "PM";
	}
	else
	{
		hour = str(systime.hour);
		ampm = "AM";
	}
		

	if(systime.minute < 10)
	{
		minute = "0" + str(systime.minute);
	}
	else
	{
		minute = str(systime.minute);
	}
	
	if(systime.second < 10)
	{
		second = "0" + str(systime.second);
	}
	else
	{
		second = str(systime.second);
	}

	return hour + ":" + minute + ":" + second + " " + ampm;
}

void WaitForEntity(int wait_entity)
// A useful function for waiting until an entity has finished its movecode
{
	// While the entity is still doing stuff
	while (entity.movecode[wait_entity])
	{
		Render(); // Render the map
		ShowPage(); // Display to screen
	}
}

//like WitForEntity() but takes into account an enemies pathfinding
void WaitForEnemy(int nEnemy)
{
	while(strcmp(Enemies[nEnemy].sNodePath, "") != 0 && entity.movecode[Enemies[nEnemy].nEntity])
	{
		Render();
		ShowPage();
	}
}

//Yes. I stole Zonker's text color thingy out of the code vault instead of mine
// Prints text to an image in any colour
void PrintStringCol(int destx, int desty, int destimg, int sourcefont, string sourcetext, int destcol)
// Pass: The x,y coords, the image to print onto, the font to use, the text to print, the colour
// Credit: Zonker
{
	int buffertextimg = NewImage(TextWidth(sourcefont, sourcetext), FontHeight(sourcefont));
	RectFill(0, 0, ImageWidth(buffertextimg) - 1, ImageHeight(buffertextimg) - 1, RGB(255, 0, 255), buffertextimg);
	PrintString(0, 0, buffertextimg, sourcefont, sourcetext);
	Silhouette(destx, desty, destcol, buffertextimg, destimg);
	FreeImage(buffertextimg);
}

//Copy of above, but right aligned
void PrintStringColRight(int destx, int desty, int destimg, int sourcefont, string sourcetext, int destcol)
{
	int buffertextimg = NewImage(TextWidth(sourcefont, sourcetext), FontHeight(sourcefont));
	RectFill(0, 0, ImageWidth(buffertextimg) - 1, ImageHeight(buffertextimg) - 1, RGB(255, 0, 255), buffertextimg);
	PrintString(0, 0, buffertextimg, sourcefont, sourcetext);
	Silhouette(destx-textwidth(sourcefont, sourcetext), desty, destcol, buffertextimg, destimg);
	FreeImage(buffertextimg);
}

//And center aligned
void PrintStringColCenter(int destx, int desty, int destimg, int sourcefont, string sourcetext, int destcol)
{
	int buffertextimg = NewImage(TextWidth(sourcefont, sourcetext), FontHeight(sourcefont));
	RectFill(0, 0, ImageWidth(buffertextimg) - 1, ImageHeight(buffertextimg) - 1, RGB(255, 0, 255), buffertextimg);
	PrintString(0, 0, buffertextimg, sourcefont, sourcetext);
	Silhouette(destx-(textwidth(sourcefont, sourcetext)/2), desty, destcol, buffertextimg, destimg);
	FreeImage(buffertextimg);
}


//tests if a file exists
int FileExists(string file)
{
	int hndl = FileOpen(file, FILE_READ);
	
	if(hndl)
	{
		FileClose(hndl);
		return 1;
	}
	else
		return 0;
	
}

int MakeScrollBar(int width, int height, int total, int current)
{
	
}

int MakeWaitBar(int width, int height, int value, int maxvalue)
{
	int barimg = newimage(width, height);
	int i;
	int x;

	int totalbars = (width-1)/2; //1 pixel between each bar, so only half of them are usefull for bars
	int numbars = (value*(totalbars))/maxvalue;
	
	
	//blank out the img
	RectFill(0, 0, width-1, height-1, RGB(255, 0, 255), barimg);

	//make the fill
	for(i=0;i<=numbars;i++)
	{
		if(i < totalbars/4)
		{
			//red bars
			Line(x, 0, x, height-1, RGB(200, 0, 0), barimg);
		}
		else if(i < totalbars/2)
		{
			//yellow bars
			Line(x, 0, x, height-1, RGB(200, 200, 0), barimg);
		}
		else
		{
			//green bars
			Line(x, 0, x, height-1, RGB(0, 200, 0), barimg);
		}
		
		x+=2;
	}
	
	//draw the numbers over the bar
	//PrintCenter(width/2, 1, barimg, nTinyFont, str(value)+"/"+str(maxvalue));

	return barimg;
	
}

int MakeThinWaitBar(int width, int value, int maxvalue)
{
	int height = 3;

	int barimg = newimage(width, height);

	//calculate the width of the fill once
	int ratio = ((value*width-2)/maxvalue)-1;
	
	//blank out the img
	RectFill(0, 0, width-1, height-1, RGB(255, 0, 255), barimg);
	//bkg fill
	RectFill(2, 1, width-1, height-1, RGB(128, 128, 128), barimg);
	//fill the image
	RectFill(1, 0, ratio, height-2, RGB(255, 0, 0), barimg);

	return barimg;
	
}

// Returns number in two digit string format. Hyper useful
string TwoDigit(int number)
// Pass: The number to convert
// Return: A two character string
// Needs: An ErrorHandler() function
{
	if (number > 99) Error("Number to convert to 2 digits past 99. This is bad.");
	if (number < 0) Error("Number to convert to 2 digits negative. This is bad.");
	if (number < 10) return "0"+str(number);
	return str(number);
}

//Stolen from Sully Simple Type
//Converts any digit to three digit form.
string ThreeDigit(int number)
{
	if (number > 999) Error("Number to convert to 3 digits is past 999. This is bad.");
	if (number < 0) Error("Number to convert to 3 digits negative. This is bad.");
	if (number < 10) return "00"+str(number);
	if (number < 100) return "0"+str(number);
	return str(number);
}

//Takes verge ticks (centiseconds) and outputs that amount in HH:MM:SS'C
string TicksToHMSC(int centi)
{
	int hour, minute, second;
	
	//count hours
	if(centi > 360000)
	{
		hour = centi/360000;
		centi -= hour*360000;
	}
	
	//count minutes
	if(centi > 6000)
	{
		minute = centi/6000;
		centi -= minute*6000;
	}
	
	//count seconds
	if(centi > 100)
	{
		second = centi/100;
		centi -= second*100;
	}
	
	//centi seconds is whatever is left over
	
	return TwoDigit(hour) + ":" + TwoDigit(minute) + ":" + TwoDigit(second) + "." + TwoDigit(centi);
	
}

//blocks for a set number of timer ticks
void WaitTimer(int t)
{
	int starttime  = timer;
	while(timer-starttime < t)
	{
		Render();
		ShowPage();
	}
}



//converts a scan code to a keyname (i.e. SCAN_W = W)
//by the way, this function is stupid
//also note this function has some of the upper chars like < and >
//even though I don't use them
string ScanToKeyName(int i)
{
	if(i == SCAN_1)
		return "1";
	else if(i == SCAN_2)
		return "2";
	else if(i == SCAN_3)
		return "3";
	else if(i == SCAN_4)
		return "4";
	else if(i == SCAN_5)
		return "5";
	else if(i == SCAN_6)
		return "6";
	else if(i == SCAN_7)
		return "7";
	else if(i == SCAN_8)
		return "8";
	else if(i == SCAN_9)
		return "9";
	else if(i == SCAN_0)
		return "0";
	else if(i == SCAN_MINUS)
		return "-";
	else if(i == SCAN_EQUALS)
		return "=";
	else if(i == SCAN_TAB)
		return "Tab";
	else if(i == SCAN_Q)
		return "Q";
	else if(i == SCAN_W)
		return "W";
	else if(i == SCAN_E)
		return "E";
	else if(i == SCAN_R)
		return "R";
	else if(i == SCAN_T)
		return "T";
	else if(i == SCAN_Y)
		return "Y";
	else if(i == SCAN_U)
		return "U";
	else if(i == SCAN_I)
		return "I";
	else if(i == SCAN_O)
		return "O";
	else if(i == SCAN_P)
		return "P";
	else if(i == SCAN_LANGLE)
		return "<";
	else if(i == SCAN_RANGLE)
		return ">";
	else if(i == SCAN_ENTER)
		return "Enter";
	else if(i == SCAN_CTRL)
		return "Ctrl";
	else if(i == SCAN_A)
		return "A";
	else if(i == SCAN_S)
		return "S";
	else if(i == SCAN_D)
		return "D";
	else if(i == SCAN_F)
		return "F";
	else if(i == SCAN_G)
		return "G";
	else if(i == SCAN_H)
		return "H";
	else if(i == SCAN_J)
		return "J";
	else if(i == SCAN_K)
		return "K";
	else if(i == SCAN_L)
		return "L";
	else if(i == SCAN_SCOLON)
		return ";";
	else if(i == SCAN_QUOTA)
		return "'";
	else if(i == SCAN_RQUOTA)
		return "`";
	else if(i == SCAN_LSHIFT)
		return "LShift";
	else if(i == SCAN_BSLASH)
		return "\";
	else if(i == SCAN_Z)
		return "Z";
	else if(i == SCAN_X)
		return "X";
	else if(i == SCAN_C)
		return "C";
	else if(i == SCAN_V)
		return "V";
	else if(i == SCAN_B)
		return "B";
	else if(i == SCAN_N)
		return "N";
	else if(i == SCAN_M)
		return "M";
	else if(i == SCAN_COMMA)
		return ",";
	else if(i == SCAN_DOT)
		return ".";
	else if(i == SCAN_SLASH)
		return "/";
	else if(i == SCAN_RSHIFT)
		return "RShift";
	else if(i == SCAN_STAR)
		return "*";
	else if(i == SCAN_ALT)
		return "Alt";
	else if(i == SCAN_SPACE)
		return "Space";
	else if(i == SCAN_CAPS)
		return "Caps";
	else if(i == SCAN_F1)
		return "F1";
	else if(i == SCAN_F2)
		return "F2";
	else if(i == SCAN_F3)
		return "F3";
	else if(i == SCAN_F4)
		return "F4";
	else if(i == SCAN_F5)
		return "F5";
	else if(i == SCAN_F6)
		return "F6";
	else if(i == SCAN_F7)
		return "F7";
	else if(i == SCAN_F8)
		return "F8";
	else if(i == SCAN_F9)
		return "F9";
	else if(i == SCAN_F10)
		return "F10";
	else if(i == SCAN_NUMLOCK)
		return "NumLock";
	else if(i == SCAN_SCRLOCK)
		return "ScrlLock";
	else if(i == SCAN_HOME)
		return "Home";
	else if(i == SCAN_UP)
		return "Up";
	else if(i == SCAN_PGUP)
		return "Page Up";
	else if(i == SCAN_GMINUS)
		return "GMinus";	//?
	else if(i == SCAN_LEFT)
		return "Left";
	else if(i == SCAN_PAD_5)
		return "Pad 5";		//numpad 5 I guess?
	else if(i == SCAN_RIGHT)
		return "Right";
	else if(i == SCAN_END)
		return "End";
	else if(i == SCAN_DOWN)
		return "Down";
	else if(i == SCAN_PGDN)
		return "Page Down";
	else if(i == SCAN_INSERT)
		return "Insert";
	else if(i == SCAN_DEL)
		return "Delete";
	else if(i == SCAN_F11)
		return "F11";
	else if(i == SCAN_F12)
		return "F12";
	else if(i == SCAN_ESC)
		return "ESC";
	else
		return "Unknown";
}

/*returns true if the rect defined by x,y,w,h collides with any obstructions in the map
returns 1 if the hit is on the left
returns 2 if the hit is on the right
returns 3 if the hit is to the top
returns 4 if the hit is to the bottom
*/
int RectCollision(int x, int y, int w, int h)
{
	//check midway between the extrems on the axis to return against. Yeah.
	if(GetObsPixel(x, y+(h/2)))		//left
		return 1;
	else if(GetObsPixel(x+w,y+(h/2)))	//right
		return 2;
	else if(GetObsPixel(x+(w/2), y))	//top
		return 3;
	else if(GetObsPixel(x+(w/2), y+h))	//bottom
		return 4;
		
	return 0;
}

//same as RectCollision() except it also checks for enemy collisions
int RectEnemyCollision(int x, int y, int w, int h)
{
	int i;
	int retval = RectCollision(x, y, w, h);
	int retvalXY;

	if(retval != 0)
	{
		return retval;
	}
	else
	{
		for(i=0;i<nNumEnemies;i++)
		{
			if(Enemies[i].nActive && Enemies[i].nMode != MODE_TRANQ)
			{
				retvalXY = CheckCollisionXY(x, y, w, h, entity.x[Enemies[i].nEntity], entity.y[Enemies[i].nEntity], entity.hotw[Enemies[i].nEntity], entity.hoth[Enemies[i].nEntity]);

				if(retvalXY != 0)
					return retvalXY;
			}
		}
	}
	
	return 0;
}

int CheckCollisionXY(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
	int left2;
	int right2;
	int top2;
	int bottom2;
	
	int t1x;
	int t1y;
	int b1x;
	int b1y;
	
	int l1x;
	int l1y;
	int r1x;
	int r1y;
	
	left2 = x2;
	right2 = x2 + w2;
	top2 = y2;
	bottom2 = y2 + h2;
	
	t1x = x1 + (w1/2);
	t1y = y1;
	b1x = x1 + (w1/2);
	b1y = y1 + h1;
	l1x = x1;
	l1y = y1 + (h1/2);
	r1x = x1 + w1;
	r1y = y1 + (h1/2);

	//Debug
	//RectFill(x1-xwin, y1-ywin, x1+w1-xwin, y1+h1-ywin, RGB(0, 255, 0), screen);
	//RectFill(left2-xwin, top2-ywin, right2-xwin, bottom2-ywin, RGB(255, 0, 0), screen);

	//left
	if(l1x < right2 && l1x > left2)
		if(l1y < bottom2 && l1y > top2)
			if(r1x > right2)
				return 1;

	//right
	if(r1x < right2 && r1x > left2)
		if(l1y < bottom2 && l1y > top2)
			if(l1x < left2)
				return 2;

	//top
	if(t1y < bottom2 && t1y > top2)
		if(t1x < right2 && t1x > left2)
			if(b1y > bottom2)
				return 3;

	//bottom
	if(b1y < bottom2 && b1y > top2)
		if(t1x < right2 && t1x > left2)
			if(t1y < top2)
				return 4;

	return 0;
}

int nPlayersSpeed;
void CripplePlayer()
{
	if(Entity.speed[nPlayerEnt] != 0)
	{
		nPlayersSpeed = Entity.speed[nPlayerEnt];
		Entity.speed[nPlayerEnt] = 0;
	}
}

void UnCripplePlayer()
{
	if(Entity.speed[nPlayerEnt] == 0)
	{
		Entity.speed[nPlayerEnt] = nPlayersSpeed;
	}
}