#define SCROLLING_TEXT_WINDOW_MAX_LINES			100
#define SCROLLING_TEXT_WINDOW_SCROLL_SPEED		3

string sTextLines[SCROLLING_TEXT_WINDOW_MAX_LINES];	//all the text that could be drawn to the PDA
int nScrollingTextStartIndex;				//position in the array of strings of the first string drawn
int nScrollingTextOverlap = 30;				//amount of space at the top of the scrollable area that will be covered
int nScrollingTextX = 0;				//x position of the current string being drawn
int nScrollingTextY = nScrollingTextOverlap;		//y position of the current string being drawn
int nScrollingTextLastItem;

void DrawScrollingTextWindow(int nDestination, int nTextFont, int nWidth, int nHeight)
{
	int i;
	int nY = nScrollingTextY;
	int nClippingRect = NewImage(nWidth, nHeight);
	
	RectFill(0, 0, nWidth, nHeight, RGB(0,0,0), nClippingRect);
	
	i = nScrollingTextStartIndex;

	while(nY < nHeight && i < SCROLLING_TEXT_WINDOW_MAX_LINES)
	{
		PrintString(nScrollingTextX, nY, nClippingRect, nTextFont, WrapText(nTextFont, sTextLines[i], nWidth));

		nY += ScrollingTextBlockHeight(i, nWidth, nTextFont);

		i++;
	}
	
	//draw the clipping rect with all the text to the destination
	Blit(8, 10, nClippingRect, nDestination);
	
	ScrollingTextWindowInput(nTextFont, nWidth);
	
	FreeImage(nClippingRect);
}

void ScrollingTextWindowInput(int nTextFont, int nWidth)
{
	if(down)
	{
		nScrollingTextY-=SCROLLING_TEXT_WINDOW_SCROLL_SPEED;

		if(ScrollingTextBlockHeight(nScrollingTextStartIndex, nWidth, nTextFont) + nScrollingTextY <= nScrollingTextOverlap)
		{
			nScrollingTextStartIndex++;
			nScrollingTextY = nScrollingTextOverlap;
		}
		
		if(nScrollingTextStartIndex >= nScrollingTextLastItem)
		{
			nScrollingTextY = nScrollingTextOverlap;
			nScrollingTextStartIndex = nScrollingTextLastItem;
		}
	}


	if(up)
	{
		nScrollingTextY+=SCROLLING_TEXT_WINDOW_SCROLL_SPEED;

		if(nScrollingTextY >= nScrollingTextOverlap)
		{
			nScrollingTextStartIndex--;
			nScrollingTextY = nScrollingTextOverlap - ScrollingTextBlockHeight(nScrollingTextStartIndex, nWidth, nTextFont);
		}

		//prevent the user from scrolling out of bounds
		if(nScrollingTextStartIndex < 0)
		{
			nScrollingTextY = nScrollingTextOverlap;
			nScrollingTextStartIndex = 0;
		}
	}
}

int ScrollingTextBlockHeight(int i, int nWidth, int nTextFont)
{
	//calculate the height of the string at sTextLines[i] from FontHeight() and WrapText() + a few pixels of spacing between each string
	string sWrapped = WrapText(nTextFont, sTextLines[i], nWidth);
	int nBreaks = strstr(chr(10), sWrapped) + 1;			//+1 since strstr does not count the last line as a new line

	return nBreaks * FontHeight(nTextFont);
}

void CopyNotesToScrollingText()
{
	int i;
	
	nScrollingTextLastItem = -1;
	
	for(i=0;i<SCROLLING_TEXT_WINDOW_MAX_LINES;i++)
	{
		//find the last item in the list. It will be the item before the first blank item.
		if(strcmp(sNotes[i], "") == 0 && nScrollingTextLastItem == -1)
			nScrollingTextLastItem = i-1;
		
		sTextLines[i] = sNotes[i] + chr(10);
	}
}

void CopyConversationsToScrollingText()
{
	int i;
	
	nScrollingTextLastItem = -1;
	
	for(i=0;i<SCROLLING_TEXT_WINDOW_MAX_LINES;i++)
	{
		//find the last item in the list. It will be the item before the first blank item.
		if(strcmp(sCommLogs[i], "") == 0 && nScrollingTextLastItem == -1)
			nScrollingTextLastItem = i-1;
		
		sTextLines[i] = sCommLogs[i] + chr(10);
	}
}
