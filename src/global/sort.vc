/*
Stolen from Wikipedia [http://en.wikipedia.org/wiki/Quicksort]

 function quicksort(array, left, right)
     if right > left
         select a pivot index (e.g. pivotIndex := left)
         pivotNewIndex := partition(array, left, right, pivotIndex)
         quicksort(array, left, pivotNewIndex-1)
         quicksort(array, pivotNewIndex+1, right)
         
  function partition(array, left, right, pivotIndex)
     pivotValue := array[pivotIndex]
     swap array[pivotIndex] and array[right] // Move pivot to end
     storeIndex := left
     for i  from  left to right // left = i < right
         if array[i] <= pivotValue 
             swap array[i] and array[storeIndex]
             storeIndex := storeIndex + 1
     swap array[storeIndex] and array[right] // Move pivot to its final place
     return storeIndex
*/
#define SORT_ARRAY_SIZE	300

string qsortData;
string qsortOtherData;

int nSortArray[SORT_ARRAY_SIZE];
int nSortOtherArray[SORT_ARRAY_SIZE];

//takes a space delineated string of intsand converts it to nSortArray
void explode(string sData)
{
	int count = TokenCount(sData, " " );
	int i;
	
	for(i=0;i<count;i++)
	{
		nSortArray[i] = val(GetToken(sData, " ", i));
	}
	
	//fill the rest with -1
	for(i=count;i<SORT_ARRAY_SIZE;i++)
	{
		nSortArray[i] = -1;
	}
}

void explodeOther(string sData)
{
	int count = TokenCount(sData, " " );
	int i;
	
	for(i=0;i<count;i++)
	{
		nSortOtherArray[i] = val(GetToken(sData, " ", i));
	}
	
	//fill the rest with -1
	for(i=count;i<SORT_ARRAY_SIZE;i++)
	{
		nSortOtherArray[i] = -1;
	}
}

string implode()
{
	int i = 0;
	string retval = "";
	
	while(nSortArray[i] > -1)
	{
		retval += str(nSortArray[i]) + " ";
		i++;
	}
	
	return retval;
}

string implodeOther()
{
	int i = 0;
	string retval = "";
	
	while(nSortOtherArray[i] > -1)
	{
		retval += str(nSortOtherArray[i]) + " ";
		i++;
	}
	
	return retval;
}
//uses quick sort to sort [data] using [by] as the keys to sort by
string qsortByOther(string data, string by, int _left, int _right)
{
	explodeOther(data);
	qsortOtherData = data;
	qsort(by, _left, _right);
	return implodeOther();
}

string qsort(string data, int _left, int _right)
{
	explode(data);
	qsortData = data;
	qsortReal(_left, _right);
	return implode();
}

void qsortReal(int _left, int _right)
{
	int pivotIndex;
	int pivotNewIndex;
	
	if(_right > _left)
	{
		pivotIndex = _left;
		pivotNewIndex = qsortPartition(_left, _right, pivotIndex);
		qsortReal(_left, pivotNewIndex-1);
		qsortReal(pivotNewIndex+1, _right);
	}
}

int qsortPartition(int _left, int _right, int pivotIndex)
{
	int pivotValue;
	int storeIndex;
	int i;
	
	pivotValue = nSortArray[pivotIndex];	//GetToken(qsortData, " ", pivotIndex);
	qsortSwap(pivotIndex, _right); // Move pivot to end
	qsortSwapOther(pivotIndex, _right);
	storeIndex = _left;
	
	for(i=_left;i<_right;i++) // left = i < right
	{
		if(nSortArray[i] <= pivotValue)
		{
			qsortSwap(i, storeIndex);
			qsortSwapOther(i, storeIndex);
			storeIndex++;
		}
	}
	
	qsortSwap(storeIndex, _right); // Move pivot to its final place
	qsortSwapOther(storeIndex, _right);
	
	return storeIndex;
}

void qsortSwap(int one, int two)
{
	int swapTemp = nSortArray[one];
	nSortArray[one] = nSortArray[two];
	nSortArray[two] = swapTemp;
}

void qsortSwapOther(int one, int two)
{
	int swapTemp = nSortOtherArray[one];
	nSortOtherArray[one] = nSortOtherArray[two];
	nSortOtherArray[two] = swapTemp;
}
