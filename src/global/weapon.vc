#define MAX_WEAPONS 15		//DO NOT CHANGE. WILL BREAK SAVE GAMES. (yeah, if I ever get around to implementing savegames)

#define WEAPON_TYPE_SILENT 0	//silent weapons do damage if the target is not alert
#define WEAPON_TYPE_SINGLE 1	//user must retrigger shoot button for every shot. Semi automatic weapons.
#define WEAPON_TYPE_AUTO   2	//user can hold down shoot button to retrigger shots. Automatic weapons.
#define WEAPON_TYPE_THROWN 3

#define NUM_WEAPONS 9

#define WEAPON_KNIFE		0
#define WEAPON_PISTON		1
#define WEAPON_SHOTGUN		2
#define WEAPON_M4		3
#define WEAPON_TRANQ		4
#define WEAPON_GRENADE		5
#define WEAPON_EMPTY		6
#define WEAPON_AUTO_SHOTGUN	7
#define WEAPON_ROCKET_LAUNCHER	8
#define	WEAPON_FLASH_BANG	9

struct Weapon
{
	int nRange;		//the radius of the range of the weapon
	string sSound;		//the sound played when fired
	int nIcon;		//the icon showed in the ingame gui
	string sName;		//weapon name
	int nDamageMin;		//minimun damage done
	int nDamageMax;		//max damage done
	int nRecharge;		//100th of a sec between shots
	int nMaxAmmo;		//max ammo for the weapon
	int nSoundRadius;	//how far the sound travels

	//for weapon accuarcy

	int nAccMin;		//max spread
	int nAccMax;		//min spread

	//for spread type weapons
	int nSpreadShots;	//how many shots the weapon makes
	
	int nType;		//see the WEAPON_TYPE #defines
	
	int nNonLethal;		// == 1 if the weapon causes enemy to go unconscious
	
	int nFuseLength;	//thrown weapons. How long before they explode.
	string sDetFunction;	//thrown weapons. Function called when the explode.
	
	string sAimFunction;
	string sShootFunction;
}

Weapon Weapons[MAX_WEAPONS];

void InitWeapons()
{
	Weapons[0].nRange = 20;
	Weapons[0].sName = "Knife";
	Weapons[0].sSound = "sounds\knife.wav";
	Weapons[0].nIcon = LoadImage("gfx\icons\punchicn.png");
	Weapons[0].nMaxAmmo = 0-1;
	Weapons[0].nDamageMin = 50;
	Weapons[0].nDamageMax = 50;
	Weapons[0].nRecharge = 0;
	Weapons[0].nSoundRadius = 0;
	Weapons[0].nSpreadShots = 1;
	Weapons[0].nType = WEAPON_TYPE_SILENT;
	Weapons[0].sAimFunction = "AimWeapon";
	Weapons[0].sShootFunction = "ShootWeapon";

	Weapons[1].nRange = 100;
	Weapons[1].sName = "Pistol";
	Weapons[1].sSound = "sounds\gun.wav";
	Weapons[1].nIcon = LoadImage("gfx\icons\pistolicn.png");
	Weapons[1].nMaxAmmo = 25;
	Weapons[1].nDamageMin = 5;
	Weapons[1].nDamageMax = 15;
	Weapons[1].nRecharge = 50;
	Weapons[1].nSoundRadius = 100;
	Weapons[1].nAccMin = 0-5;
	Weapons[1].nAccMax = 5;
	Weapons[1].nSpreadShots = 1;
	Weapons[1].nType = WEAPON_TYPE_SINGLE;
	Weapons[1].sAimFunction = "AimWeapon";
	Weapons[1].sShootFunction = "ShootWeapon";
	
	Weapons[2].nRange = 75;
	Weapons[2].sName = "Shotgun";
	Weapons[2].sSound = "Sounds\shotgun.wav";
	Weapons[2].nIcon = LoadImage("gfx\icons\shotgunicn.png");
	Weapons[2].nMaxAmmo = 20;
	Weapons[2].nDamageMin = 10;
	Weapons[2].nDamageMax = 15;
	Weapons[2].nRecharge = 100;
	Weapons[2].nSoundRadius = 300;	//dem shotguns is loud mah!
	Weapons[2].nSpreadShots = 5;
	Weapons[2].nAccMin = 0-15;
	Weapons[2].nAccMax = 15;
	Weapons[2].nType = WEAPON_TYPE_SINGLE;
	Weapons[2].sAimFunction = "AimWeapon";
	Weapons[2].sShootFunction = "ShootWeapon";


	Weapons[3].nRange = 100;
	Weapons[3].sName = "M4";
	Weapons[3].sSound = "sounds\mgun.wav";
	Weapons[3].nIcon = LoadImage("gfx\icons\mgunicn.png");
	Weapons[3].nMaxAmmo = 45;
	Weapons[3].nDamageMin = 5;
	Weapons[3].nDamageMax = 10;
	Weapons[3].nRecharge = 6;
	Weapons[3].nSoundRadius = 250;
	Weapons[3].nAccMin = 0-15;
	Weapons[3].nAccMax = 15;
	Weapons[3].nSpreadShots = 1;
	Weapons[3].nType = WEAPON_TYPE_AUTO;
	Weapons[3].sAimFunction = "AimWeapon";
	Weapons[3].sShootFunction = "ShootWeapon";

	
	Weapons[4].nRange = 125;
	Weapons[4].sName = "Tranq Gun";
	Weapons[4].sSound = "sounds\tranq.wav";
	Weapons[4].nIcon = LoadImage("gfx\icons\tranqicn.png");
	Weapons[4].nMaxAmmo = 30;
	Weapons[4].nDamageMin = 50;
	Weapons[4].nDamageMax = 100;
	Weapons[4].nRecharge = 100;
	Weapons[4].nSoundRadius = 5;
	Weapons[4].nAccMin = 0-5;
	Weapons[4].nAccMax = 5;
	Weapons[4].nType = WEAPON_TYPE_SINGLE;
	Weapons[4].nSpreadShots = 1;
	Weapons[4].nNonLethal = 1;
	Weapons[4].sAimFunction = "AimWeapon";
	Weapons[4].sShootFunction = "ShootWeapon";


	Weapons[5].nRange = 100;
	Weapons[5].sName = "Grenades";
	Weapons[5].sSound = "sounds\grenadeDrop.wav";
	Weapons[5].nIcon = LoadImage("gfx\icons\grenade.png");
	Weapons[5].nMaxAmmo = 10;
	Weapons[5].nDamageMin = 10;
	Weapons[5].nDamageMax = 20;
	Weapons[5].nRecharge = 100;
	Weapons[5].nSoundRadius = 5;
	Weapons[5].nAccMin = 0-5;
	Weapons[5].nAccMax = 5;
	Weapons[5].nType = WEAPON_TYPE_THROWN;
	Weapons[5].nSpreadShots = 1;
	Weapons[5].nFuseLength = 150;
	Weapons[5].sDetFunction = "GrenadeExplode";
	Weapons[5].sAimFunction = "FreeAimWeapon";
	Weapons[5].sShootFunction = "ThrowGrenade";

	Weapons[6].nRange = 0;
	Weapons[6].sName = "Empty";
	Weapons[6].sSound = "";
	Weapons[6].nIcon = LoadImage("gfx\icons\nogun.png");
	Weapons[6].nMaxAmmo = -1;
	Weapons[6].nDamageMin = 0;
	Weapons[6].nDamageMax = 0;
	Weapons[6].nRecharge = 10;
	Weapons[6].nSoundRadius = 0;
	Weapons[6].nAccMin = 0;
	Weapons[6].nAccMax = 0;
	Weapons[6].nType = WEAPON_TYPE_THROWN;
	Weapons[6].nSpreadShots = 0;
	Weapons[6].sAimFunction = "NullAim";
	Weapons[6].sShootFunction = "NullShoot";

	Weapons[7].nRange = 75;
	Weapons[7].sName = "Auto Shotgun";
	Weapons[7].sSound = "sounds\shotgun.wav";
	Weapons[7].nIcon = LoadImage("gfx\icons\shotgunicn.png");
	Weapons[7].nMaxAmmo = 20;
	Weapons[7].nDamageMin = 10;
	Weapons[7].nDamageMax = 15;
	Weapons[7].nRecharge = 25;
	Weapons[7].nSoundRadius = 300;	//dem shotguns is loud mah!
	Weapons[7].nSpreadShots = 5;
	Weapons[7].nAccMin = 0-15;
	Weapons[7].nAccMax = 15;
	Weapons[7].nType = WEAPON_TYPE_AUTO;
	Weapons[7].sAimFunction = "AimWeapon";
	Weapons[7].sShootFunction = "ShootWeapon";

	Weapons[8].nRange = 100;
	Weapons[8].sName = "Rocket Launcher";
	Weapons[8].sSound = "sounds\grenadeDrop.wav";
	Weapons[8].nIcon = LoadImage("gfx\icons\grenade.png");
	Weapons[8].nMaxAmmo = 10;
	Weapons[8].nDamageMin = 10;
	Weapons[8].nDamageMax = 20;
	Weapons[8].nRecharge = 100;
	Weapons[8].nSoundRadius = 5;
	Weapons[8].nAccMin = 0-5;
	Weapons[8].nAccMax = 5;
	Weapons[8].nType = WEAPON_TYPE_THROWN;
	Weapons[8].nSpreadShots = 1;
	Weapons[8].nFuseLength = 150;
	Weapons[8].sDetFunction = "GrenadeExplode";
	Weapons[8].sAimFunction = "FreeAimWeapon";
	Weapons[8].sShootFunction = "ShootRocket";
	
	Weapons[9].nRange = 100;
	Weapons[9].sName = "Flash Bang";
	Weapons[9].sSound = "sounds\grenadeDrop.wav";
	Weapons[9].nIcon = LoadImage("gfx\icons\grenade.png");
	Weapons[9].nMaxAmmo = 10;
	Weapons[9].nDamageMin = 10;
	Weapons[9].nDamageMax = 20;
	Weapons[9].nRecharge = 100;
	Weapons[9].nSoundRadius = 5;
	Weapons[9].nAccMin = 0-5;
	Weapons[9].nAccMax = 5;
	Weapons[9].nType = WEAPON_TYPE_THROWN;
	Weapons[9].nSpreadShots = 1;
	Weapons[9].nFuseLength = 150;
	Weapons[9].sDetFunction = "FlashBangExplode";
	Weapons[9].sAimFunction = "FreeAimWeapon";
	Weapons[9].sShootFunction = "ThrowGrenade";
}

void FreeWeapons()
{
	int i;
	
	for(i=0;i<NUM_WEAPONS;i++)
	{
		FreeImage(Weapons[i].nIcon);
	}
}


//fires the weapon at the target. It is a given that the target is in range
//checks for spread weapons, and does the LoS check multiple times if necessary
//else only does it once
//shooter and target are ENTITY indexes
int LOSstop;
void FireWeapon(int shooter, int target)
{
	int eqweapon, i, enemyindex;
	
	Error("FireWeapon() Called shooter: " + str(shooter) + " target: " + str(target));
	
	//face your target when shooting
	EntityFace(shooter, target);
	
	if(shooter != nPlayerEnt)
	{
		enemyindex = GetEnemyIndex(shooter);
		PlaySoundStack(Weapons[Enemies[enemyindex].nWeapon].sSound);
		//enemies have inf ammo, don't take it away
		eqweapon = Enemies[enemyindex].nWeapon;

		//start the enemy animation
		if(entity.face[Enemies[enemyindex].nEntity] == ENTITY_FACE_UP)
		{
			AnimateEnemy(enemyindex, Enemies[enemyindex].sShootUpAnim);
		}
		else if(entity.face[Enemies[enemyindex].nEntity] == ENTITY_FACE_LEFT)
		{
			AnimateEnemy(enemyindex, Enemies[enemyindex].sShootLeftAnim);
		}
		else if(entity.face[Enemies[enemyindex].nEntity] == ENTITY_FACE_DOWN)
		{
			AnimateEnemy(enemyindex, Enemies[enemyindex].sShootDownAnim);
		}
		else if(entity.face[Enemies[enemyindex].nEntity] == ENTITY_FACE_RIGHT)
		{
			AnimateEnemy(enemyindex, Enemies[enemyindex].sShootRightAnim);
		}
	}
	else
	{
		if(Weapons[nEquipedWeapon].nMaxAmmo > 0)
			nAmmo[nEquipedWeapon]--;
			
		//only silent weapons can miss, and therfore sometimes won't play there sound
		//non silent always play the sound
		if(Weapons[nEquipedWeapon].nType != WEAPON_TYPE_SILENT)
			PlaySoundStack(Weapons[nEquipedWeapon].sSound);
			
		eqweapon = nEquipedWeapon;
		enemyindex = shooter;

		//only show the animation if the weapon is non silent or (the weapon is silent and the target is not alert)
		if(Weapons[nEquipedWeapon].nType != WEAPON_TYPE_SILENT || (Weapons[nEquipedWeapon].nType == WEAPON_TYPE_SILENT && Enemies[GetEnemyIndex(target)].nMode != MODE_ALERT))
		{
			if(entity.face[nPlayerEnt] == ENTITY_FACE_UP)
			{
				AnimatePlayer("Z29 W10 Z30 W10");
			}
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_LEFT)
			{
				AnimatePlayer("Z27 W10 Z28 W10");
			}
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_DOWN)
			{
				AnimatePlayer("Z25 W10 Z26 W10");
			}
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_RIGHT)
			{
				AnimatePlayer("Z31 W10 Z32 W10");
			}
		}
	}

	for(i=0;i<Weapons[eqweapon].nSpreadShots;i++)
	{
		//say goodby to your FPS
		LOSstop = LineOfSight(entity.x[shooter]+(entity.hotw[shooter]/2), entity.y[shooter]+(entity.hoth[shooter]/2), entity.x[target]+(entity.hotw[target]/2)+Random(Weapons[eqweapon].nAccMin, Weapons[eqweapon].nAccMax), entity.y[target]+(entity.hoth[target]/2)+Random(Weapons[eqweapon].nAccMin, Weapons[eqweapon].nAccMax), shooter);
		FireWeaponHelp(shooter, target);
	}
}

//shooter and target are ENTITY indexes
void FireWeaponHelp(int shooter, int target)
{
	int enemyindex, targetindex;

	if(LOSstop >= 0 && LOSstop != nPlayerEnt)
		targetindex = GetEnemyIndex(LOSstop);
	
	/*CHEAT CODE - Lets player be invincible*/
	if(CHEATS_ENABLED)
	{
		if(target == nPlayerEnt && nGodMode)
			return;
	}

	//give guards a chance to hear the shot
	if(shooter == nPlayerEnt)
	{
		MakeSound(shooter, Weapons[nEquipedWeapon].nSoundRadius);
		//start charging the weapon
		nShotAt = timer;
		enemyindex = shooter;
	}
	else
	{
		enemyindex = GetEnemyIndex(shooter);
		MakeSound(shooter, Weapons[Enemies[enemyindex].nWeapon].nSoundRadius);
	}
	
	Error("FireWeaponHelp() called shooter: " + str(shooter) + " target: " + str(target) + " enemyindex: " + str(enemyindex) + " targetindex: " + str(targetindex));

	//we hit an ent
	if(LOSstop >= 0)
	{
		if(shooter != nPlayerEnt)
		{
			if(LOSstop != nPlayerEnt)
			{
				if(Enemies[targetindex].nActive)
				{
					//enemy shot enemy
					//FRIENDLY FIRE!!
					DamageEnemy(Random(Weapons[Enemies[enemyindex].nWeapon].nDamageMin, Weapons[Enemies[enemyindex].nWeapon].nDamageMax), LOSstop, DAMAGE_TYPE_NORMAL);				
					//put the explode anim where it hit
					LoadAnimationEX("bloodhit.png", 8, 8, LOSXstop, LOSYstop, "T1 F0 W15 F1 W15 F2 W15 F3 W15 D");
				}
			}
			else
			{
				//enemy shot player
				DamageEnemy(Random(Weapons[Enemies[enemyindex].nWeapon].nDamageMin, Weapons[Enemies[enemyindex].nWeapon].nDamageMax), LOSstop, DAMAGE_TYPE_NORMAL);				
				//put the explode anim where it hit
				LoadAnimationEX("bloodhit.png", 8, 8, LOSXstop, LOSYstop, "T1 F0 W15 F1 W15 F2 W15 F3 W15 D");
			}
		}
		else if(shooter == nPlayerEnt)
		{
			//shooter is a player
			//so check if the ent we hit is valid
			if(Enemies[targetindex].nActive)
			{
				if(Weapons[nEquipedWeapon].nType == WEAPON_TYPE_SILENT)
				{
					//silent weapons only work if the target is not active
					if(Enemies[targetindex].nMode != MODE_ALERT)
					{
						DamageEnemy(Random(Weapons[nEquipedWeapon].nDamageMin, Weapons[nEquipedWeapon].nDamageMax), LOSstop, DAMAGE_TYPE_NORMAL);
						PlaySoundStack(Weapons[nEquipedWeapon].sSound);
					}
				}
				else if(Weapons[nEquipedWeapon].nNonLethal)
				{
					DamageEnemy(Random(Weapons[nEquipedWeapon].nDamageMin, Weapons[nEquipedWeapon].nDamageMax), LOSstop, DAMAGE_TYPE_TRANQ);
					//put the dart explode anim where it hit
					LoadAnimationEX("darthit.png", 8, 8, LOSXstop, LOSYstop, "T1 F0 W15 F1 W15 F2 W15 F3 W15 D");
				}
				else
				{
					DamageEnemy(Random(Weapons[nEquipedWeapon].nDamageMin, Weapons[nEquipedWeapon].nDamageMax), LOSstop, DAMAGE_TYPE_NORMAL);
					//put the explode anim where it hit
					LoadAnimationEX("bloodhit.png", 8, 8, LOSXstop, LOSYstop, "T1 F0 W15 F1 W15 F2 W15 F3 W15 D");
				}
			}
		}
	}

			
	//if it runs into an obs, stop the shot
	if(LOSstop == 0-1)
	{
		//put the explode anim where it hit
		LoadAnimationEX("bullethit.png", 8, 8, LOSXstop, LOSYstop, "T1 F0 W15 F1 W15 F2 W15 F3 W15 D");
	}	
}

void SwitchWeaponUp()
{
	//don't switch weapons when aiming
	if(BUTTON_AIM && strcmp(sEntitiesInRange, "")!=0)
		return;
		
	nEquipedWeapon++;
	
	if(nEquipedWeapon > NUM_WEAPONS)
		nEquipedWeapon = 0;

	while(!nHasWeapon[nEquipedWeapon])
	{
		nEquipedWeapon++;
		
		if(nEquipedWeapon > NUM_WEAPONS)
			nEquipedWeapon = 0;
	}
				
	UnpressButtons();
}

void SwitchWeaponDown()
{
	//don't switch weapons when aiming
	if(BUTTON_AIM && strcmp(sEntitiesInRange, "")!=0)
		return;

	nEquipedWeapon--;
	
	if(nEquipedWeapon < 0)
		nEquipedWeapon = NUM_WEAPONS;
		
	while(!nHasWeapon[nEquipedWeapon])
	{
		nEquipedWeapon--;
		
		if(nEquipedWeapon < 0)
			nEquipedWeapon = NUM_WEAPONS;
	}

	UnpressButtons();
}

void GetWeaponAmmoLoot(int i)
{
	GetWeaponLoot(i);
	GetAmmoLoot(i);
}

void GetWeaponLoot(int i)
{
	nHasWeapon[i] = 1;
}

void GetAmmoLoot(int i)
{
	nAmmo[i] += Weapons[i].nMaxAmmo/2;
	
	if(nAmmo[i] > Weapons[i].nMaxAmmo)
		nAmmo[i] = Weapons[i].nMaxAmmo;
}

void GetPistol()
{
	GetWeaponAmmoLoot(WEAPON_PISTON);
}

void GetShotgun()
{
	GetWeaponAmmoLoot(WEAPON_SHOTGUN);
}

void GetM4()
{
	GetWeaponAmmoLoot(WEAPON_M4);
}
