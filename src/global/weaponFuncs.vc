int nLastFreeAimTick;

void AimWeapon()
{
	int i;

	if(!bHasTargetList)
	{
		sEntitiesInRange = GenerateTargetList();
		bHasTargetList = 1;

		//if there are entities to aim at
		if(strcmp(sEntitiesInRange, "")!=0)
		{
			//get enemy index of first enemy in the list
			nTargetIndex = val(GetToken(sEntitiesInRange, " ", 0));
		}
		else
		{
			anims[nTargetPointerAnim].x = 0-16;
			anims[nTargetPointerAnim].y = 0-16;
			bHasTargetList = 0;

			return;
		}
	}	

	//target is in range
	if(Enemies[nTargetIndex].nActive && Distance(nPlayerEnt, Enemies[nTargetIndex].nEntity) < Weapons[nEquipedWeapon].nRange)
	{
		//put the pointer on one
		anims[nTargetPointerAnim].x = entity.x[Enemies[nTargetIndex].nEntity];
		anims[nTargetPointerAnim].y = entity.y[Enemies[nTargetIndex].nEntity];

		//face the enemy
		EntityFace(nPlayerEnt, Enemies[nTargetIndex].nEntity);
	}
	else
	{
		anims[nTargetPointerAnim].x = 0-16;
		anims[nTargetPointerAnim].y = 0-16;
		bHasTargetList = 0;

		return;	//nothing to target? exit out
	}

	//change targets
	if(BUTTON_WEAPON_SWITCHUP)
	{
		sEntitiesInRange = GenerateTargetList();
		//find the current target in the list
		//no in_array() :(
		for(i=0;i<TokenCount(sEntitiesInRange, " ");i++)
		{
			if(val(GetToken(sEntitiesInRange, " ", i)) == nTargetIndex)
			{
				if(i == TokenCount(sEntitiesInRange, " ")-1)
				{
					//if we are at the end of the list, change to the first in the list
					nTargetIndex = val(GetToken(sEntitiesInRange, " ", 0));
				}
				else
				{
					//else go to the next in the list
					nTargetIndex = val(GetToken(sEntitiesInRange, " ", i+1));
				}
				i = TokenCount(sEntitiesInRange, " "); //break;
			}
		}
		UnpressWeaponSwitchButtons();
	}

	if(BUTTON_WEAPON_SWITCHDOWN)
	{
		sEntitiesInRange = GenerateTargetList();

		//find the current target in the list
		//no in_array() :(
		for(i=0;i<TokenCount(sEntitiesInRange, " ");i++)
		{
			if(val(GetToken(sEntitiesInRange, " ", i)) == nTargetIndex)
			{
				if(i == 0)
				{
					//if we are at the front of the list, change to the last in the list
					nTargetIndex = val(GetToken(sEntitiesInRange, " ", TokenCount(sEntitiesInRange, " ")-1));
				}
				else
				{
					//else go to the previous in the list
					nTargetIndex = val(GetToken(sEntitiesInRange, " ", i-1));
				}
				i = TokenCount(sEntitiesInRange, " "); //break; also MDK
			}
		}
		UnpressWeaponSwitchButtons();
	}
}

void FreeAimWeapon()
{
	int theta;

	//calculate the delta in ticks between this and the previous cycle
	int nFreeAimTickDelta = oF_Whole2Fixed(timer - nLastFreeAimTick);
	nLastFreeAimTick = timer;
	
	entity.speed[nPlayerEnt] = 0;
	
	//free aim!
	if(!bAimingLastTick)
	{
		nFreeAimX = entity.x[nPlayerEnt];
		nFreeAimY = entity.y[nPlayerEnt];
	}

	if(up)
	{
		nFreeAimY-=2*oF_Fixed2Int(nFreeAimTickDelta);
	}

	if(down)
	{
		nFreeAimY+=2*oF_Fixed2Int(nFreeAimTickDelta);
	}

	if(left)
	{
		nFreeAimX-=2*oF_Fixed2Int(nFreeAimTickDelta);
	}

	if(right)
	{
		nFreeAimX+=2*oF_Fixed2Int(nFreeAimTickDelta);
	}
	
	if(DistanceXY(entity.x[nPlayerEnt], entity.y[nPlayerEnt], nFreeAimX, nFreeAimY)  > Weapons[nEquipedWeapon].nRange)
	{
		//r = weapon range
		//theta = atan2(DeltaY, DeltaX)
		//x = r cos (theta)
		//y = r sin (theta)
			
		theta = zatan2(nFreeAimY - entity.y[nPlayerEnt], nFreeAimX - entity.x[nPlayerEnt]);

		nFreeAimX = entity.x[nPlayerEnt] + ((Weapons[nEquipedWeapon].nRange * cos(theta)) / 65536);
		nFreeAimY = entity.y[nPlayerEnt] + ((Weapons[nEquipedWeapon].nRange * sin(theta)) / 65536);
	}
	
	anims[nTargetPointerAnim].x = nFreeAimX;
	anims[nTargetPointerAnim].y = nFreeAimY;
}

void PostFreeAim()
{
	PostAimWeapon();
	cameratracking = 1;
	entity.speed[nPlayerEnt] = PLAYER_WALK_SPEED;
	bHasTargetList = 0;
}

void PostAimWeapon()
{
	anims[nTargetPointerAnim].x = 0-16;
	anims[nTargetPointerAnim].y = 0-16;
}

void SniperAim()
{
	int nScreenMask = NewImage(ImageWidth(screen), ImageWidth(screen));
	FreeAimWeapon();
	
	//center the camera around the target
	cameratracking = 0;
	xwin = nFreeAimX - (ImageWidth(screen)/2) + 8;
	ywin = nFreeAimY - (ImageHeight(screen)/2) + 8;
	
	//make a mask to hide most of the screen 
	RectFill(0, 0, ImageWidth(screen), ImageWidth(screen), RGB(0, 0, 0), nScreenMask);
	CircleFill((ImageWidth(screen)/2), (ImageHeight(screen)/2), 35, 35, COLOR_DEATH_MAGENTA, nScreenMask);
	
	TBlit(0, 0, nScreenMask, screen);
	
	FreeImage(nScreenMask);
}

void ShootWeapon()
{
	int nEntity;
	
	if(strcmp(sEntitiesInRange, "")!=0)
	{
		//let the player hold down the fire button on automatic weapons
		if(Weapons[nEquipedWeapon].nType != WEAPON_TYPE_AUTO)
			UnpressButtons();

		nEntity = Enemies[nTargetIndex].nEntity;

		FireWeapon(nPlayerEnt, entity.x[nEntity], entity.y[nEntity], entity.hotw[nEntity], entity.hoth[nEntity]);

		PlayerShootAnimation();
		
		PlaySoundStack(Weapons[nEquipedWeapon].sSound);
	}
}

void KnifeAttack()
{
	int nEntity;
	
	if(strcmp(sEntitiesInRange, "")!=0)
	{
		UnpressButtons();

		nEntity = Enemies[nTargetIndex].nEntity;

		if(Enemies[nTargetIndex].nMode != MODE_ALERT)
		{
			PlayerShootAnimation();
			PlaySoundStack(Weapons[nEquipedWeapon].sSound);
		}

		FireWeapon(nPlayerEnt, entity.x[nEntity], entity.y[nEntity], entity.hotw[nEntity], entity.hoth[nEntity]);
	}
}

//Shoot function for the sniper rifle. Calls ShootWeaponXY() and then shakes the screen
void ShootSniper()
{
	ShootWeaponXY();
	
	StartShake(5, 20);
}

void ShootWeaponXY()
{
	//TODO: remove magic numbers
	FireWeapon(nPlayerEnt, nFreeAimX, nFreeAimY, 16, 16);

	PlayerShootAnimation();
	
	PlaySoundStack(Weapons[nEquipedWeapon].sSound);
}

int nDeltaX;
int nDeltaY;
int nDeltaXDecay;
int nDeltaYDecay;
int nThrownAnim;

void ThrowGrenade()
{
	nDeltaX = oF_divFF(oF_Whole2Fixed(nFreeAimX - entity.x[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));
	nDeltaY = oF_divFF(oF_Whole2Fixed(nFreeAimY - entity.y[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));

	if(entity.face[nPlayerEnt] == ENTITY_FACE_UP || entity.face[nPlayerEnt] == ENTITY_FACE_DOWN)
		nThrownAnim = LoadAnimationEX("grenadeUD.png", 8, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");
	else
		nThrownAnim = LoadAnimationEX("grenadeLR.png", 8, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");

	CreateThrown(oF_Whole2Fixed(entity.x[nPlayerEnt]), oF_Whole2Fixed(entity.y[nPlayerEnt],) nDeltaX, nDeltaY, nThrownAnim, Weapons[nEquipedWeapon].nFuseLength, nEquipedWeapon, THROWN_COLLISION_REFLECT, Weapons[nEquipedWeapon].sDetFunction);

	nAmmo[nEquipedWeapon]--;

	UnpressButtons();
	
	PlaySoundStack(Weapons[nEquipedWeapon].sSound);
}

void NullAim()
{
	anims[nTargetPointerAnim].x = -15;
	anims[nTargetPointerAnim].y = -15;
}

void NullShoot()
{
}

void GrenadeExplode()
{
	SoundGrenade();
	CreateDamageArea(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 50, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMin, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMax, "DamageAreaDamage", 50);
	MakeSoundXY(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 100);
	StartShake(2, 25);
	LoadAnimationEX("explode.png", 64, 64, oF_Fixed2Int(ThrownItems[nCurrentThrown].nX)-16, oF_Fixed2Int(ThrownItems[nCurrentThrown].nY)-16, "T1 F0 L25 W20 F1 L50 W20 F2 L75 W20 F3 W20");
	CreateEmitter(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), "gfx\misc\smoke.png", 5, 5, 5, 0, 360, 5, 50, 50, 75);
}

void FlashBangExplode()
{
	SoundGrenade();
	CreateDamageArea(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 50, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMin, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMax, "DamageAreaStun", 50);
	MakeSoundXY(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 100);
	//screen fade effect
	FadeIn(50, RGB(255, 255, 255));
	nFadeInStart-=10;
}

//TODO: Refactor me. Please.
void ShootRocket()
{
	if(nAmmo[nEquipedWeapon] == 0)
	{
		//no ammo, play the out of ammo sound
		//guards can hear the click
		MakeSound(nPlayerEnt, 50);
		SoundNoAmmo();
		UnpressButtons();
	}
	else
	{
		PlaySoundStack(Weapons[nEquipedWeapon].sSound);
		
		if(timer > nShotAt+Weapons[nEquipedWeapon].nRecharge)
		{
			nDeltaX = oF_divFF(oF_Whole2Fixed(nFreeAimX - entity.x[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));
			nDeltaY = oF_divFF(oF_Whole2Fixed(nFreeAimY - entity.y[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));

			if(entity.face[nPlayerEnt] == ENTITY_FACE_UP)
				nThrownAnim = LoadAnimationEX("rocketU.png", 8, 16, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_DOWN)
				nThrownAnim = LoadAnimationEX("rocketD.png", 8, 16, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_LEFT)
				nThrownAnim = LoadAnimationEX("rocketL.png", 16, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");
			else if(entity.face[nPlayerEnt] == ENTITY_FACE_RIGHT)
				nThrownAnim = LoadAnimationEX("rocketR.png", 16, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");

			CreateThrown(oF_Whole2Fixed(entity.x[nPlayerEnt]), oF_Whole2Fixed(entity.y[nPlayerEnt],) nDeltaX, nDeltaY, nThrownAnim, Weapons[nEquipedWeapon].nFuseLength, nEquipedWeapon, THROWN_COLLISION_DETONATE, Weapons[nEquipedWeapon].sDetFunction);
			
			nAmmo[nEquipedWeapon]--;

			UnpressButtons();
		}
	}
}
