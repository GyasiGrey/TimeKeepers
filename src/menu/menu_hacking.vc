int nHackingCertainty;
int nHackingCertaintyDelay = 75;
string sHackingRandomPassword[5];
int nHackingRandomPasswordIndex;	//must always be less then sHackingRandomPassword.Length
string sHackingCompleteFunction;	//the function to run once a hack is successfull

string sHackingFirstMessage;
string sHackingSecondMessage;

void OpenHackingMenu(string sCompleteFunc)
{
	SetPause(1);
	
	sHackingCompleteFunction = sCompleteFunc;
	
	CreateMenu(35, 25, GetMenuTemplateIndex("MenuHacking"));
	
	nHackingRandomPasswordIndex = -1;
	
	sHackingFirstMessage = "";
	sHackingSecondMessage = "";
	
	HackingFirstMessage();
}

void MenuHackingDraw()
{
	int img;
	int i;
	
	img = CreateWindow("Terminal", 250, 160, nTerminalFont);
	
	PrintString(8, 16, img, nTerminalFont, WrapText(nTerminalFont, sHackingFirstMessage, 90));
	PrintString(8, 40, img, nTerminalFont, WrapText(nTerminalFont, sHackingSecondMessage, 90));
	
	for(i=0;i<=nHackingRandomPasswordIndex;i++)
	{
		PrintString(8, 72 + (i*FontHeight(nTerminalFont)), img, nTerminalFont, sHackingRandomPassword[i]);
	}
		
	PrintString(175, 130, img, nDigitalFont, ThreeDigit(nHackingCertainty) + "%");

	Blit(nMenuX, nMenuY, img, screen);
	
	FreeImage(img);
}

void MenuHackingLogic()
{
	//on weapon key press, close the menu
	if(BUTTON_SHOOT)
	{
		CloseTopMenu();
	}
}

void MenuHackingClose()
{
	FreeDelayedCallbackByFunction("HackingCalculateCertainty");
	FreeDelayedCallbackByFunction("HackingCalculateRandomPassword");
	FreeDelayedCallbackByFunction("HackingIncrementPasswordIndex");
	
	SetPause(0);
}

void HackingCalculateCertainty()
{
	nHackingCertainty = random(1, 100);
	
	CreateDelayedCallbackEx(nHackingCertaintyDelay, "HackingCalculateCertainty", 1);
}

void HackingCalculateRandomPassword()
{
	int i;
	string sTempPassword = "";
	
	
	for(i=0;i<15;i++)
	{
		sTempPassword += chr(random(33, 122));
	}
	
	sHackingRandomPassword[nHackingRandomPasswordIndex] = sTempPassword;
	
	CreateDelayedCallbackEx(nHackingCertaintyDelay, "HackingCalculateRandomPassword", 1);
}

void HackingIncrementPasswordIndex()
{
	nHackingRandomPasswordIndex++;
	
	if(nHackingRandomPasswordIndex < 5)
	{
		CreateDelayedCallbackEx(nHackingCertaintyDelay*4, "HackingIncrementPasswordIndex", 1);
	}
	else
	{
		nHackingRandomPasswordIndex = 4;
		
		//hack complete. Close this menu and run the function passed to OpenHackingMenu().
		CloseTopMenu();
		CallFunction(sHackingCompleteFunction);
	}
}

void HackingFirstMessage()
{
	sHackingFirstMessage = "Scanning Binaries.";
	CreateDelayedCallbackEx(5, "HackingStepFirstMessage", 1);
}

void HackingStepFirstMessage()
{
	sHackingFirstMessage += " .";
	
	if(len(sHackingFirstMessage) >= 100)
		HackingSecondMessage();
	else
		CreateDelayedCallbackEx(5, "HackingStepFirstMessage", 1);
}

void HackingSecondMessage()
{
	sHackingSecondMessage = "Hash retrieved. Decoding.";
	CreateDelayedCallbackEx(5, "HackingStepSecondMessage", 1);
}

void HackingStepSecondMessage()
{
	sHackingSecondMessage += " .";
	
	if(len(sHackingSecondMessage) >= 100)
		HackingStart();
	else
		CreateDelayedCallbackEx(5, "HackingStepSecondMessage", 1);
}

void HackingStart()
{
	HackingIncrementPasswordIndex();
	HackingCalculateCertainty();
	HackingCalculateRandomPassword();
}