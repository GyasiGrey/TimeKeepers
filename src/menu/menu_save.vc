int nSaveMenuAnim;

void OpenSaveMenu()
{
	SetEntitiesPaused(1);
	nPointerPos = 0;
	nLoadMenuOffset = 0;
	
	nSaveMenuAnim = LoadAnimationEX("cursor.png", 8, 8, 51, 49, ANIMATION_CURSOR_ANIM_STRING);
	anims[nSaveMenuAnim].automatic = 0;
	
	CreateMenu(50, 20, GetMenuTemplateIndex("MenuSave"));
	//PushMenuStack(nMenuFocus);
	
	nLoadMenuNumSaves = CountSaveGames();
	nLoadMenuOffset = nLoadMenuNumSaves+1;
	
	//load necessary data from save games, starting at the last save
	SaveMenu_LoadBasicData(nLoadMenuOffset);
}

//loads the data for the save menu
void SaveMenu_LoadBasicData(int i)
{
	//call the load menu version first
	LoadMenu_LoadBasicData(i);

	//we need to put the new game stuff in
	if(i == nLoadMenuNumSaves+1)
	{
		sSaveDate[2] = sSaveDate[1];
		sSaveTime[2] = sSaveTime[1];
		sSaveArea[2] = sSaveArea[1];
		sSaveFile[2] = sSaveFile[1];
		if(ImageValid(iSaveImages[1]))
		{
			iSaveImages[2] = DuplicateImage(iSaveImages[1]);
			FreeImage(iSaveImages[1]);
		}

		sSaveDate[1] = sSaveDate[0];
		sSaveTime[1] = sSaveTime[0];
		sSaveArea[1] = sSaveArea[0];
		sSaveFile[1] = sSaveFile[0];
		if(ImageValid(iSaveImages[0]))
		{
			iSaveImages[1] = DuplicateImage(iSaveImages[0]);
			FreeImage(iSaveImages[0]);
		}

		sSaveDate[0] = "";
		sSaveTime[0] = "";
		sSaveArea[0] = "New Game";
		sSaveFile[0] = "save"+ThreeDigit(i)+".sav";
		iSaveImages[0] = NewImage(SAVE_SCREEN_SHOT_WIDTH, SAVE_SCREEN_SHOT_HEIGHT);
		
		if(iSaveImages[0])		//no reason the last call should fail, but still for stability sake
			RectFill(0, 0, SAVE_SCREEN_SHOT_WIDTH, SAVE_SCREEN_SHOT_HEIGHT, RGB(0, 0, 0), iSaveImages[0]);
	}
}


void MenuSaveDraw()
{

	int i;
	int img = CreateWindow("Save", 150, 110, nTerminalFont);

	//write out all the data for the save games shown in the menu
	Blit(nMenuX, nMenuY, img, screen);
	
	for(i=0;i<3;i++)
	{
		if(ImageValid(iSaveImages[i]))
		{
			Blit(nMenuX+9, nMenuY+18+(i*30), iSaveImages[i], screen);

			PrintString(nMenuX+50, nMenuY+18+(i*30), screen, nTerminalFont, sSaveArea[i]);
			PrintString(nMenuX+100, nMenuY+18+(i*30), screen, nTerminalFont, sSaveFile[i]);

			PrintString(nMenuX+50, nMenuY+26+(i*30), screen, nTerminalFont, sSaveDate[i]);
			PrintString(nMenuX+100, nMenuY+26+(i*30), screen, nTerminalFont, sSaveTime[i]);
		}
	}
	
	FreeImage(img);
	
	DrawAnimation(nSaveMenuAnim);
}

void MenuSaveLogic()
{
	int saveidx;	//for holding the index of the game to be loaded. This way we can close the menus (and clear nPointerPos) before calling LoadGame()
	anims[nSaveMenuAnim].y = 49 + (nPointerPos*30);
	
	if(up)
	{
		SoundKeyboardRand();
		
		if(nPointerPos > 0)
			nPointerPos--;
		else 
		{
			if(nLoadMenuOffset <= nLoadMenuNumSaves)	//allow the up key to go too far, lets us put the new game item in
			{
				nLoadMenuOffset++;
				SaveMenu_LoadBasicData(nLoadMenuOffset);
			}
		}
			
		unpress(5);
	}
	else if(down)
	{
		SoundKeyboardRand();
		
		if(nPointerPos < 2)
			nPointerPos++;
		else
		{
			if(nLoadMenuOffset >= 3)
			{
				nLoadMenuOffset--;
				SaveMenu_LoadBasicData(nLoadMenuOffset);
			}
		}
			
		unpress(6);
	}
	else if(BUTTON_SHOOT)
	{
		SoundKeyboardRand();
		
		saveidx = nLoadMenuOffset-nPointerPos;
		
		if(saveidx >= 0)
		{
			UnpressButtons();
			SaveGame("save/save"+ThreeDigit(saveidx)+".sav");
			CloseTopMenu();
		}
		else
		{
			SoundError();
		}
	}
	else if(BUTTON_MEDKIT)
	{
		SoundKeyboardRand();
		
		UnpressButtons();
		CloseTopMenu();
	}
}

void MenuSaveClose()
{
	FreeAnimation(nSaveMenuAnim);
}
