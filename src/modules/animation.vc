/***************************************
 * animation.vc                        *
 * author: vecna                       *
 * modified: ness - added lots of stuff*
 * a quick utility library to simplify *
 * using an 'animation-strip' style    *
 * image in animations.                *
 ***************************************/

/**************************** data ****************************/

struct anim_t
{
	int sizex, sizey;
	int numframes;
	int active;
	int image;
	int x, y;
	int frame;
	int luc;
	string animstr;
	int nStrpos;
	int wait, startwait;
	int tracking;				//true if the anim stays stationary relative to the screen
	int ex;					//true if it's an extended animation
	int automatic;				//true if this anim is drawn by the hook systeh. Otherwise must be drawn manually.
};

anim_t anims[MAX_ANIMATIONS];

/**************************** code ****************************/

int LoadAnimationImg(int img, int sizex, int sizey, int _x, int _y, string _animstr)
{
	int i, index;
	
	if(!ImageValid(img))
	{
		Error("LoadAnimationImg() - Image passed was invalid! (" + str(img) + ")");
		return 0;
	}

	Error("LoadAnimationImg(" + str(img) + ", " + str(sizex) + ", " + str(sizey) + ", " + str(_x) + ", " + str(_y) + ", " + _animstr + ")");	
	
	// find a free animation slot thingy
	index = NO_INDEX;
	for (i=0; i<MAX_ANIMATIONS; i++)
		if (!anims[i].active && i<index)
			index = i;

	// exit if none available
	if (index == NO_INDEX) 
		Error("LoadAnimation: No free slots available! Increase MAX_ANIMATIONS!");

	// load up this animation, detect number of frames
	anims[index].image = img;
	anims[index].active = 1;
	anims[index].sizex = sizex;
	anims[index].sizey = sizey;
	anims[index].numframes = ImageHeight(anims[index].image) / sizey;
	
	anims[index].x = _x;
	anims[index].y = _y;
	anims[index].animstr = _animstr;
	anims[index].luc = 0;
	anims[index].nStrpos = 0;
	anims[index].wait = 0;
	anims[index].startwait = 0;
	anims[index].frame = 0;
	anims[index].tracking = 0;
	
	anims[index].ex = 1;
	
	anims[index].automatic = 1;

	Error("New anim index: " + str(index) + " has image handle " + str(anims[index].image));

	return index;
}

int LoadAnimationEX(string filename, int sizex, int sizey, int _x, int _y, string _animstr)
{
	return LoadAnimationImg(LoadImage0("gfx\\animations\\" + filename), sizex, sizey, _x, _y, _animstr);
}

void FreeAllAnimations()
{
	int i;
	
	for(i=0;i<MAX_ANIMATIONS;i++)
	{
		if(anims[i].active)
			FreeAnimation(i);
	}
	
	_testPre("FreeAllAnimations_manual");
	_test("FreeAllAnimations_manual");
	_testPost("FreeAllAnimations_manual");
}

void FreeAnimation(int index)
{
	Error("Freeing animation " + str(index));

	if (!anims[index].active)
	{
		Error("FreeAnimation() - Requested index is not in use! (" + str(index) + ")");
		return; 
	}
	
	if(!ImageValid(anims[index].image))
	{
		Error("FreeAnimation() - Requested animation has an invalid image! (" + str(index) + ")");
	}
	else
	{
		FreeImage(anims[index].image);
	}
	
	anims[index].image = -1;
	anims[index].sizex = 0;
	anims[index].sizey = 0;
	anims[index].numframes = 0;
	anims[index].active = 0;
}

void TBlitFrame(int x, int y, int anim, int frame, int dest)
{
	int frametop;
	int animationFrameImage = NewImage(anims[anim].sizex, anims[anim].sizey);
	
	if (!anims[anim].active)
	{
		Error("TBlitFrame() - Requested animation is empty!! (" + str(anim) + ")");
		return;
	}
		
	if (!ImageValid(anims[anim].image))
	{
		Error("TBlitFrame() - Requested animation has an invalid image!! (" + str(anim) + ") I'm killing this anim as a precaution.");
		FreeAnimation(anim);
		return;
	}
	
	if (frame > anims[anim].numframes)
	{
		Error("TBlitFrame() - Requested animation frame does not exist!! (" + str(anim) + ")");
		return;
	}

	//grab the frame out of the animation strip
	frametop = anims[anim].sizey * frame;
	GrabRegion(0, frametop, anims[anim].sizex-1, frametop+anims[anim].sizey-1, 0, 0, anims[anim].image, animationFrameImage);

	//draw that frame to the destination
	if(anims[anim].luc != 0)
		SetLucent(anims[anim].luc);
		
	TBlit(x, y, animationFrameImage, dest);

	if(anims[anim].luc != 0)
		SetLucent(0);
	
	FreeImage(animationFrameImage);
}

void ProcessAnimations()
{
	int i;
	int luctmp;
	string tok;

	//RectFill(0, 0, ImageWidth(nAnimLayer), ImageHeight(nAnimLayer), rgb(255, 0, 255), nAnimLayer);	

	//loop through all animations
	for(i=0;i<MAX_ANIMATIONS;i++)
	{
		if(vcTimer[TIMER_ANIMATION_LOGIC].nTick > anims[i].wait + anims[i].startwait)
		{
			anims[i].wait = 0;
			anims[i].startwait = 0;
		}
		
		//while the animation is active and it's not waiting
		if(anims[i].active && anims[i].ex && anims[i].wait <= 0)
		{
			if(anims[i].nStrpos > TokenCount(anims[i].animstr, " "))
			{
				FreeAnimation(i);
			}
			else
			{
				//get the next token
				tok = ToLower(GetToken(anims[i].animstr, " ", anims[i].nStrpos));

				//series of if statements based on the first char of the token

				//if the char is 'f' change the frame to the int that follows the char
				if(strcmp(mid(tok, 0, 1), "f")==0)
				{
					//FR means random frame
					if(!strcmp(right(tok, len(tok)-1), "r"))
					{
						anims[i].frame = Random(0, anims[i].numframes-1);
					}
					else
					{
						anims[i].frame = val(right(tok, len(tok)-1));
					}
				}
				//if the char is 'w' set nWait to the int that follows and set nStartWait to vcTimer[TIMER_ANIMATION_LOGIC].nTick
				else if(strcmp(mid(tok, 0, 1), "w")==0)
				{
					anims[i].wait = val(right(tok, len(tok)-1));
					anims[i].startwait = vcTimer[TIMER_ANIMATION_LOGIC].nTick;
				}
				//if the char is 'x' set nX to the int that follows
				else if(strcmp(mid(tok, 0, 1), "x")==0)
				{
					anims[i].x = val(right(tok, len(tok)-1));
				}
				//if the char is 'y' set nY to the int that follows
				else if(strcmp(mid(tok, 0, 1), "y")==0)
				{
					anims[i].y = val(right(tok, len(tok)-1));
				}
				//if the char is 'l' set nLuc to the int that follows
				else if(strcmp(mid(tok, 0, 1), "l")==0)
				{
					anims[i].luc = val(right(tok, len(tok)-1));
				}
				//if the char is 't' change the tracking
				else if(strcmp(mid(tok, 0, 1), "t")==0)
				{
					anims[i].tracking = val(right(tok, len(tok)-1));
				}
				//if the char is 's' play the sound(int) that follows
				else if(strcmp(mid(tok, 0, 1), "s")==0)
				{
					PlaySound(val(right(tok, len(tok)-1)), 100);
				}
				//if the char is 'r' set nStringPos to 0 so the anim repeats
				else if(strcmp(mid(tok, 0, 1), "r")==0)
				{
					anims[i].nStrpos = 0-1;
				}
				//if the char is 'd' remove the animation
				else if(strcmp(mid(tok, 0, 1), "d")==0)
				{
					FreeAnimation(i);
				}
			}
			
			anims[i].nStrpos++;
		}

		if(anims[i].automatic)
		{
			DrawAnimation(i);
		}
	}
}

void DrawAnimation(int anim)
{
	if(anims[anim].active && anims[anim].ex)
	{
		//draw the frame of the anim at nX, nY, at lucency nLuc
		if(anims[anim].tracking)
			TBlitFrame(anims[anim].x-xwin, anims[anim].y-ywin, anim, anims[anim].frame, screen);
		else
			TBlitFrame(anims[anim].x, anims[anim].y, anim, anims[anim].frame, screen);
	}
}