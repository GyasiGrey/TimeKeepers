//Span enemies every whatever ticks. Player lasts as long as possible
int nArenaLastSpawn;
int nArenaNumEnemies;
int nArenaSpawnDelay;
int nArenaSpawnPoints;
int nArenaScore;

int bArenaRewards[5];

int nArenaLevel;

void ArenaStart(int spawnDelay, int numEnemies, int arenaLevel)
{
	string sArenaStartText = "Arena mode begin. Kill or be killed.";
	
	nArenaLastSpawn = timer;
	nArenaSpawnDelay = spawnDelay;
	nArenaNumEnemies = numEnemies;
	
	AddHook("ArenaHook", 5);
	AddHook("ArenaGUI", 2502);
	
	nArenaSpawnPoints = DictNew();
	
	lucentTextFade(160-(TextWidth(nTinyFont, sArenaStartText)/2), 80-(FontHeight(nTinyFont)/2), sArenaStartText, nTinyFont, RGB(255, 255, 255), 0);
	
	bArenaRewards[0] = 0;
	bArenaRewards[1] = 0;
	bArenaRewards[2] = 0;
	bArenaRewards[3] = 0;
	bArenaRewards[4] = 0;
	
	nArenaScore = 0;
	
	nNumMedkits = 2;
	
	arenaLevel = nArenaLevel;
	
	SetPause(0);

	//override the normal death check sequence
	RemovePreHook("PlayerDeath");
	AddPreHook("ArenaDeath", 5);
}

void ArenaDeath()
{
	int retval;
	string scoreData;
	int tryagain;
	
	if(nHealth <= 0)
	{
		nHealth = 0;
		RemovePreHook("ArenaDeath");
		
		
		RemoveHook("ArenaHook");
		RemoveHook("ArenaGUI");
		
		//upload arena score
		SendMissionData(9+nArenaLevel);

		//go to normal death sequence
		PlayerDeath();
	}
}

void ArenaAddSpawnPoint(int x, int y)
{
	Error("Adding spawn point: " + str(DictSize(nArenaSpawnPoints)) + ", x: " + str(x) + " y: " + str(y));
	DictSetString(nArenaSpawnPoints, str(DictSize(nArenaSpawnPoints)), str(x) + "_" + str(y));
}

void ArenaHook()
{
	int spawnPoint;
	int spawnX, spawnY;
	int ent;
	string sArenaText;
	
	//if it is time to spawn enemies, and there are too few enemies on the map...spawn some!
	if(timer - nArenaLastSpawn > nArenaSpawnDelay && NumAliveEntities() < nArenaNumEnemies)
	{
		//get a random spawn point
		spawnPoint = Random(0, 	DictSize(nArenaSpawnPoints) -1);
		spawnX = val(GetToken(DictGetString(nArenaSpawnPoints, str(spawnPoint)), "_", 0));
		spawnY = val(GetToken(DictGetString(nArenaSpawnPoints, str(spawnPoint)), "_", 1));
		
		ent = CreateEnemy(spawnX, spawnY, ENTITY_FACE_UP, ENEMY_TEMPLATE_PISTOL, "", "guard.chr");
		MakeAlert(ent);
		
		nArenaLastSpawn = timer;
	}
	
	//rewards based on time spent
	if(vcTimer[TIMER_ENEMY_LOGIC].nTick > 3000 && !bArenaRewards[0])
	{
		sArenaText = "Survived for 30 second! +1 medkit!";
		lucentTextFade(160-(TextWidth(nTinyFont, sArenaText)/2), 80-(FontHeight(nTinyFont)/2), sArenaText, nTinyFont, RGB(255, 255, 255), 0);
		GetMedkitLoot();
		
		bArenaRewards[0] = 1;
	}

	if(vcTimer[TIMER_ENEMY_LOGIC].nTick > 6000 && !bArenaRewards[1])
	{
		sArenaText = "Survived for 60 seconds! Ammo refilled!";
		lucentTextFade(160-(TextWidth(nTinyFont, sArenaText)/2), 80-(FontHeight(nTinyFont)/2), sArenaText, nTinyFont, RGB(255, 255, 255), 0);
		GetPistol();
		GetShotgun();
		GetM4();
		
		bArenaRewards[1] = 1;
	}
	
	//calculate score
	//10 for every normal kill
	//20 for every silent kill
	//30 for every tranq
	//1 for every second on the clock
	nArenaScore = (nEnemiesKilled * 50) + (nSilentKills * 100) + (nEnemiesTranqd * 200) + (vcTimer[TIMER_ENEMY_LOGIC].nTick/100);
}

void ArenaGUI()
{
	//draw the arena specific GUI
	
	//time in this arena match
	PrintString(0, 0, screen, nTinyFont, "Time: " + TicksToHMSC(vcTimer[TIMER_ENEMY_LOGIC].nTick));
	//num kills
	PrintString(0, 8, screen, nTinyFont, "Kills: " + str(nEnemiesKilled));
	//knife kills
	PrintString(0, 16, screen, nTinyFont, "Silent Kills: " + str(nSilentKills));
	//tranq kills
	PrintString(0, 24, screen, nTinyFont, "Tranq's: " + str(nEnemiesTranqd));
	//medkits used
	PrintString(0, 32, screen, nTinyFont, "Medkits Used: " + str(nMedkitsUsed));
	//score
	PrintString(0, 40, screen, nTinyFont, "Score: " + str(nArenaScore));
}