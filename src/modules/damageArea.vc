#define MAX_DAMAGE_AREA		30

struct DamageArea
{
	int nX;				//x location of the center of the area
	int nY;				//y location of the center of the area
	int nRadius;			//radius of the area
	int nMinDamage;			//min damage taken
	int nMaxDamage;			//max damage taken
	int nDieTime;			//timer when this area will die
	int dEntitiesHit;		//dictionary of the entities hit by this damage area
	string sCollisionFunction;	//the function run when an entity collides with this damage area
	
	int nActive;
}

DamageArea DamageAreas[MAX_DAMAGE_AREA];

int CreateDamageArea(int x, int y, int radius, int minDamage, int maxDamage, string sColisionFunction, int dieTime)
{
	int i;
	
	for(i=0;i<MAX_DAMAGE_AREA;i++)
	{
		if(!DamageAreas[i].nActive)
		{
			DamageAreas[i].nX = x;
			DamageAreas[i].nY = y;
			DamageAreas[i].nRadius = radius;
			DamageAreas[i].nMinDamage = minDamage;
			DamageAreas[i].nMaxDamage = maxDamage;
			DamageAreas[i].nDieTime = timer + dieTime;
			DamageAreas[i].dEntitiesHit = DictNew();
			DamageAreas[i].sCollisionFunction = sColisionFunction;
			
			DamageAreas[i].nActive = 1;
			return i;
		}
	}
	
	FatialError("damageArea.vc::CreateDamageArea() - MAX_DAMAGE_AREA to small.");
	return -1;
}

void ProcessesDamageArea()
{
	int i, j;
	
	for(i=0;i<MAX_DAMAGE_AREA;i++)
	{
		if(DamageAreas[i].nActive)
		{
			if(!DictContains(DamageAreas[i].dEntitiesHit, str(nPlayerEnt)) && DistanceXY(DamageAreas[i].nX, DamageAreas[i].nY, entity.x[nPlayerEnt], entity.y[nPlayerEnt]) < DamageAreas[i].nRadius)
			{
				CallFunction(DamageAreas[i].sCollisionFunction,	i, nPlayerEnt);
				DictSetInt(DamageAreas[i].dEntitiesHit, str(nPlayerEnt), 1);
			}
				
			for(j=0;j<nNumEnemies;j++)
			{
				if(Enemies[j].nActive)
				{
					//if an enemy is inside this area's radius, damage it
					if(!DictContains(DamageAreas[i].dEntitiesHit, str(Enemies[j].nEntity)) && DistanceXY(DamageAreas[i].nX, DamageAreas[i].nY, entity.x[Enemies[j].nEntity], entity.y[Enemies[j].nEntity]) < DamageAreas[i].nRadius)
					{
						CallFunction(DamageAreas[i].sCollisionFunction,	i, Enemies[j].nEntity);
						DictSetInt(DamageAreas[i].dEntitiesHit, str(Enemies[j].nEntity), 1);
					}
				}
			}
			
			//if timer > this area's dieTimer, kill it
			if(timer > DamageAreas[i].nDieTime)
				KillDamageArea(i);

		}
	}
}

void KillDamageArea(int i)
{
	DamageAreas[i].nActive = 0;
	DictFree(DamageAreas[i].dEntitiesHit);
}

void DamageAreaDamage(int nArea, int nTarget)
{
	DamageEnemy(Random(DamageAreas[nArea].nMinDamage, DamageAreas[nArea].nMaxDamage), nTarget);
}

void DamageAreaStun(int nArea, int nTarget)
{
	if(nTarget != nPlayerEnt)
	{
		KnockOut(GetEnemyIndex(nTarget), 200);
	}
	else
	{
		//team flash n00b - longer screen fade and annoying ear ringing noise
		FadeIn(300, RGB(255, 255, 255));
	}
}
