//dialogBox.vc - Holds code for the dialog box. Now in it's own file!

//death to the magic numbers!!
#define DIALOG_BOX_WIDTH	215
#define DIALOG_BOX_HEIGHT	65
#define DIALOG_BOX_TEXT_WIDTH	200
#define DIALOG_BOX_X_POS	58
#define DIALOG_BOX_Y_POS	155
#define DIALOG_BOX_X_PADDING	5
#define DIALOG_BOX_Y_PADDING	5
#define DIALOG_BOX_BLINK_WAIT	80
#define DIALOG_BOX_BLINK_WIDTH	4
#define DIALOG_BOX_BLINK_HEIGHT	4

#define COMM_END_WAIT 300	//how long to wait before closing the comm window
#define COMM_LETTER_WAIT 2	//number of CS to wait between typing letters

#define COMM_QUEUE_LEN	25	//queue up to 25 comm messages

//int's pretending to be defines because a define can't reference a define
int DIALOG_BOX_BLINK_X = DIALOG_BOX_X_POS+DIALOG_BOX_WIDTH-DIALOG_BOX_BLINK_WIDTH-DIALOG_BOX_X_PADDING;
int DIALOG_BOX_BLINK_Y = DIALOG_BOX_Y_POS+DIALOG_BOX_HEIGHT-DIALOG_BOX_BLINK_HEIGHT-DIALOG_BOX_Y_PADDING;

//vars for the comm window thingy
int nCommStart;			//timer when the comm window started waiting (for text typing)
int nCommPos;			//where in the string the window is
int nCommTextX;
int nCommTextY;
int nCommEnd;
int nCommDone;
int nCommLetterWait=1;		//how long to wait between letters for the comm messages
int nHoldCommText;
int nBlinkState;		//for the blinker on the held CommText
int nLastBlinkAt;

void DrawCommText()
{
	int i;
	
	int nCommImg;			//the image handle for the comm window
	nCommImg = NewImage(DIALOG_BOX_WIDTH, DIALOG_BOX_HEIGHT);
	RectFill(0, 0, DIALOG_BOX_WIDTH, DIALOG_BOX_HEIGHT, RGB(0, 0, 0), nCommImg);

	//*************DRAW THE COMM TEXT**************//
	//if there is no text to draw, but there is text in the queue, dequeue it

	if(!strcmp(sCommText, "") && !CommQueueEmpty())
	{
		sCommText = CommDeQueue();	//grab the next string to write
		nCommStart = timer;		//log when we started to write this string
		nCommPos = 0;
		nCommDone = 0;
	}
	else if(strcmp(sCommText, "")) //there is text to draw
	{
		SetLucent(50);
		TBlit(DIALOG_BOX_X_POS, DIALOG_BOX_Y_POS, nCommImg, screen);	//blit the lucent black window to the screen
		SetLucent(0);

		nCommTextX=DIALOG_BOX_X_POS + DIALOG_BOX_X_PADDING;
		nCommTextY=DIALOG_BOX_Y_POS + DIALOG_BOX_Y_PADDING;
		
		//if were in a forced dialog, let the player press the 
		//shoot button to zoom right to the end
		if(timer > nCommStart+COMM_LETTER_WAIT)
		{
			nCommPos += timer-nCommStart;	//timer logic to keep text moving at the same speed on all computers, regardless of CPU speed
			nCommStart = timer;
			
			if(!nCommDone && nCommPos >= len(sCommText))	//check if we are done writing
			{
				nCommEnd = timer;
				nCommDone = 1;
			}
		}
		
		if(!nGamePaused && BUTTON_SHOOT && nHoldCommText)			//if this dialog is forced allow the player to skip to the end
		{
			nCommPos = len(sCommText);
			nCommDone = 1;
			UnpressButtons();
		}


		//print text
		for(i=0;i<nCommPos;i++)
		{
			if(i<len(sCommText))
			{
				//move down a line if theres a line break in there
				if(strcmp(Mid(sCommText, i, 1), chr(10))==0)
				{
					nCommTextX=DIALOG_BOX_X_POS + DIALOG_BOX_X_PADDING;
					nCommTextY+=FontHeight(nDialogBoxFont)+1;
				}
				else
				{
					//PrintStringCol(nCommTextX+1, nCommTextY+1, screen, nDialogBoxFont, Mid(sCommText, i, 1), RGB(0, 0, 0)); //because drop shadows are awesome like that
					PrintString(nCommTextX, nCommTextY, screen, nDialogBoxFont, Mid(sCommText, i, 1));
					nCommTextX += TextWidth(nDialogBoxFont, Mid(sCommText, i, 1));				
				}
			}
		}
		
		if(nHoldCommText)
		{
			UpdateControls();
			if(!nGamePaused && nCommDone && BUTTON_SHOOT)	//if this is a forced dialog and it is complete, wait for the player to press the button
			{
				sCommText = "";
				UnpressButtons();
			}

			if(timer-nLastBlinkAt > DIALOG_BOX_BLINK_WAIT)	//blink a cursor while waiting for the player
			{
				if(nBlinkState == 1)
					nBlinkState = 0;
				else
					nBlinkState = 1;
					
				nLastBlinkAt = timer;
			}
			
			if(nBlinkState)
				RectFill(DIALOG_BOX_BLINK_X, DIALOG_BOX_BLINK_Y, DIALOG_BOX_BLINK_X+DIALOG_BOX_BLINK_WIDTH, DIALOG_BOX_BLINK_Y+DIALOG_BOX_BLINK_HEIGHT, RGB(0, 255, 0), screen);
		}
		else
		{
			if(nCommDone && timer > nCommEnd+COMM_END_WAIT)
			{
				sCommText = "";
			}
		}
	}
	
	FreeImage(nCommImg);
}

string sCommText;
string sCommQueue[COMM_QUEUE_LEN];

//for the communications between Ghost and Tech
//actually from Tech to Ghost
void CommText(string text)
{
	AddCommLog(text);	//add to the log
	
	//if text is still being displayed, enqueue the new text
	if(strcmp(sCommText, ""))
	{
		CommEnqueue(WrapText(nDialogBoxFont, text, DIALOG_BOX_TEXT_WIDTH));
	}
	else
	{
		sCommText = WrapText(nDialogBoxFont, text, DIALOG_BOX_TEXT_WIDTH);
		nCommStart = timer;
		nCommPos = 0;
		nCommDone = 0;
	}
}

void EmptyCommQueue()
{
	int i;
	
	for(i=0;i<COMM_QUEUE_LEN;i++)
	{
		sCommQueue[i] = "";
	}
}

void CommEnqueue(string s)
{
	int i;
	
	//look for the first blank item in the list
	for(i=0;i<COMM_QUEUE_LEN;i++)
	{
		if(strcmp(sCommQueue[i], "") == 0)
		{
			sCommQueue[i] = s;
			return;
		}
	}
	
	Error("gui.vc::CommEnqueue() - Queue to small - Increase COMM_QUEUE_LEN");
}

string CommDequeue()
{
	string retval;
	int i;
	
	if(CommQueueEmpty())
	{
		Error("gui.vc::CommDequeue() - Queue underrun!");
		return "";
	}
	
	//grab the first item off the list
	//then cycle everything up one
	retval = sCommQueue[0];
	
	for(i=0;i<COMM_QUEUE_LEN-1;i++)
	{
		sCommQueue[i] = sCommQueue[i+1];
	}
	
	
	return retval;
}

//returns 1 if the first item in the queue is "" - signifying that it's empty yo
int CommQueueEmpty()
{
	if(!strcmp(sCommQueue[0], ""))
		return 1;
	else
		return 0;
}

void WaitForCommText()
{
	while(!CommQueueEmpty() || strcmp(sCommText, ""))
	{
		Render();
		ShowPage();
	}
}