#define MAX_THROWN		30

struct ThrownItem
{
	int nX;			//fixed point number
	int nY;			//fixed point number
	int nDeltaX;		//fixed point number
	int nDeltaY;		//fixed point number
	int nAnim;
	int nDetonateTimer;
	int nWeapon;
	int nCollisionType;
	string sDetonateFunc;
	
	int nActive;
}

ThrownItem ThrownItems[MAX_THROWN];
int nCurrentThrown = -1;

int CreateThrown(int x, int y, int dx, int dy, int anim, int dtimer, int nweapon, int collisiontype, string func)
{
	int i;
	
	for(i=0;i<MAX_THROWN;i++)
	{
		if(!ThrownItems[i].nActive)
		{
			ThrownItems[i].nX = x;
			ThrownItems[i].nY = y;
			ThrownItems[i].nDeltaX = dx;
			ThrownItems[i].nDeltaY = dy;
			ThrownItems[i].nAnim = anim;
			ThrownItems[i].nDetonateTimer = vcTimer[TIMER_ENEMY_LOGIC].nTick + dtimer;
			ThrownItems[i].nWeapon = nweapon;
			ThrownItems[i].nCollisionType = collisiontype;
			ThrownItems[i].sDetonateFunc = func;
			
			ThrownItems[i].nActive = 1;
			
			Anims[anim].automatic = 0;
			return i;
		}
	}
	
	FatialError("throw.vc::CreateThrown() - MAX_THROWN to small.");
	return -1;
}

void ProcessesThrown()
{
	int i, obsCollision;
	
	if(nGamePaused)
		return;
	
	for(i=0;i<MAX_THROWN;i++)
	{
		if(ThrownItems[i].nActive)
		{
			//if the thrown object hits an obstruction, bounce in the opposite direction
			obsCollision = RectCollision(oF_Fixed2Int(ThrownItems[i].nX), oF_Fixed2Int(ThrownItems[i].nY), 8, 8);

			if(ThrownItems[i].nCollisionType == THROWN_COLLISION_REFLECT)
			{
				switch(obsCollision)
				{
					case 1:	//left
						ThrownItems[i].nDeltaX = ThrownItems[i].nDeltaX * -1;
					case 2:	//right
						ThrownItems[i].nDeltaX = ThrownItems[i].nDeltaX * -1;
					case 3:	//top
						ThrownItems[i].nDeltaY = ThrownItems[i].nDeltaY * -1;
					case 4:	//botom
						ThrownItems[i].nDeltaY = ThrownItems[i].nDeltaY * -1;
				}
			}
			else if(ThrownItems[i].nCollisionType == THROWN_COLLISION_DETONATE)
			{
				if(obsCollision)
				{
					nCurrentThrown = i;
					CallFunction(ThrownItems[i].sDetonateFunc);
					nCurrentThrown = -1;

					KillThrown(i);
				}
			}

			//move this item by deltaX and deltaY
			ThrownItems[i].nX += ThrownItems[i].nDeltaX;
			ThrownItems[i].nY += ThrownItems[i].nDeltaY;


			Anims[ThrownItems[i].nAnim].x = oF_Fixed2Int(ThrownItems[i].nX);
			Anims[ThrownItems[i].nAnim].y = oF_Fixed2Int(ThrownItems[i].nY);

			if(vcTimer[TIMER_ENEMY_LOGIC].nTick >= ThrownItems[i].nDetonateTimer)
			{
				nCurrentThrown = i;
				CallFunction(ThrownItems[i].sDetonateFunc);
				nCurrentThrown = -1;
				
				KillThrown(i);
			}
		}
	}
}

void KillThrown(int i)
{
	FreeAnimation(ThrownItems[i].nAnim);
	
	ThrownItems[i].nX = 0;
	ThrownItems[i].nY = 0;
	ThrownItems[i].nDeltaX = 0;
	ThrownItems[i].nDeltaY = 0;
	ThrownItems[i].nAnim = 0;
	ThrownItems[i].nDetonateTimer = 0;
	ThrownItems[i].nWeapon = -1;
	ThrownItems[i].sDetonateFunc = "";

	ThrownItems[i].nActive = 0;
}

void KillAllThrown()
{
	int i;
	
	for(i=0;i<MAX_THROWN;i++)
	{
		if(ThrownItems[i].nActive)
			KillThrown(i);
	}
}

void DrawThrown()
{
	int i;
	
	for(i=0;i<MAX_THROWN;i++)
	{
		if(ThrownItems[i].nActive)
			DrawAnimation(ThrownItems[i].nAnim);
	}
}