void test_qsortSwap()
{
	nSortArray[0] = 10;
	nSortArray[1] = 15;
	
	qsortSwap(0, 1);
	
	assertTrue(nSortArray[0] == 15);
	assertTrue(nSortArray[1] == 10);
}

void test_implode()
{
	nSortArray[0] = 10;
	nSortArray[1] = 15;
	nSortArray[2] = -1;

	assertTrue(strcmp(implode(), "10 15 ") == 0);
}

void test_qsort()
{
	string sData = "2 1 3 4 ";

	assertTrue(strcmp(qsort(sData, 0, TokenCount(sData, " ")-1), "1 2 3 4 ") == 0);
}

void test_qsortByOther()
{
	string sData = "2 1 3 5 ";
	string sKeys = "4 3 2 1 ";

	assertTrue(strcmp(qsortbyother(sData, sKeys, 0, TokenCount(sData, " ")-1), "5 3 1 2 ") == 0);
}

void test_NodeWithShortestDistance()
{
	int result;
	
	//setup some distances
	EmptyQueue();
	
	queue[0] = 0;
	queue[1] = 1;
	queue[2] = 2;
	
	nDistances[0] = 10;
	nDistances[1] = 5;
	nDistances[2] = 15;
	
	result = NodeWithShortestDistance();

	assertTrue(result == 1);
	
	//clean up after your self
	nDistances[0] = 0;
	nDistances[1] = 0;
	nDistances[2] = 0;
	
	EmptyQueue();
}

void test_XYCollision()
{
	//big object around a small object
	assertTrue(CheckCollisionXY(5, 5, 10, 10, 6, 6, 1, 1));
	//small object inside a big object
	assertTrue(CheckCollisionXY(6, 6, 1, 1, 5, 5, 10, 10));
	//objects outside each other
	assertFalse(CheckCollisionXY(1, 1, 1, 1, 5, 5, 10, 10));
}
