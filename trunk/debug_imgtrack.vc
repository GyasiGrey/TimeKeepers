#define DEBUG_MAXIMAGETRACK 20000
int nVerbose = 1;	//controls if the log will show all images, or just unfreeded images

struct debug_imagetrack
{
	string sFilename;
	int nHandle;
	int bFreed;
	int bUsed;
} 
debug_imagetrack dbg_images[DEBUG_MAXIMAGETRACK];

/*
Functions to macro over

NewImage(int, int)
LoadImage(string)
LoadImage0(string)
DuplicateImage(int)

FreeImage(int)
*/

int dbg_NewImage(int width, int height)
{
	return dbg_ImageAdd(NewImage(width, height), "NewImage(" + str(width) + ", " + str(height) + ")");
}

int dbg_LoadImage(string filename)
{
	return dbg_ImageAdd(LoadImage(filename), filename);
}

int dbg_LoadImage0(string filename)
{
	return dbg_ImageAdd(LoadImage0(filename), filename);
}

int dbg_DuplicateImage(int hndl)
{
	return dbg_ImageAdd(DuplicateImage(hndl), "DuplicateImage(" + str(hndl) + ")");
}

void dbg_FreeImage(int hndl)
{
	dbg_images[dbg_FindImage(hndl)].bFreed = 1;
	
	FreeImage(hndl);
}

/*
SOUND FUNCTIONS
*/
int dbg_LoadSound(string filename)
{
	return dbg_ImageAdd(LoadSound(filename), filename);
}

void dbg_FreeSound(int hndl)
{
	dbg_images[dbg_FindImage(hndl)].bFreed = 1;
	
	FreeSound(hndl);
}

int dbg_ImageAdd(int hndl, string filename)
{
	//adds a new item at the end of the array, keeping track of the hndl and filename
	int i;
	
	for(i=0;i<DEBUG_MAXIMAGETRACK;i++)
	{
		if(dbg_images[i].bUsed == 0)
		{
			dbg_images[i].bUsed = 1;
			dbg_images[i].nHandle = hndl;
			dbg_images[i].sFilename = filename;
			dbg_images[i].bFreed = 0;

			return hndl;
		}
	}
	Messagebox("DEBUG: ImageAdd() out of space. Increase DEBUG_MAXIMAGETRACK");
	return 0;
}

int dbg_FindImage(int hndl)
{
	//finds an image in the array. Searches it backwards so it should always find the most recent image for this handle
	int i;
	
	for(i=DEBUG_MAXIMAGETRACK-1;i>=0;i--)
	{
		if(dbg_images[i].bUsed == 1 && dbg_images[i].nHandle == hndl)
			return i;
	}
	Messagebox("DEBUG: FindImage() couldn't find " + str(hndl));
	return 0;
}

void dbg_ImageReport()
{
	int i;

	Error("");
	Error("Image Report Start");
	for(i=0;i<DEBUG_MAXIMAGETRACK;i++)
	{
		if(dbg_images[i].bUsed == 1)
		{
			if(nVerbose)
			{
				Error("");
				Error("**");
				Error("Image Filename: " + dbg_images[i].sFilename);
				Error("Image Handle: " + str(dbg_images[i].nHandle));
				if(dbg_images[i].bFreed)
					Error("Image has been freed");
				else
					Error("Image has NOT been freed");
			}
			else
			{
				if(!dbg_images[i].bFreed)
				{
					Error("");
					Error("**");
					Error("Image Filename: " + dbg_images[i].sFilename);
					Error("Image Handle: " + str(dbg_images[i].nHandle));
					Error("Image has NOT been freed");
				}
			}
		}
	}
	Error("");
	Error("Image Report End");
}

//to be macro'd over exit()
void dbg_ReportAndExit(string msg)
{
	dbg_ImageReport();
	exit(msg);
}

//The macros. Since verge is not case sensitive, but defines are (#define NewImage != #define newimage) 
//I'm going to use the most popular capitalizations. Might need to add to this list.

#define NewImage dbg_NewImage
#define newimage dbg_NewImage

#define LoadImage dbg_LoadImage
#define loadimage dbg_LoadImage

#define LoadImage0 dbg_LoadImage0
#define loadimage0 dbg_LoadImage0

#define DuplicateImage dbg_DuplicateImage
#define duplicateimage dbg_DuplicateImage

#define FreeImage dbg_FreeImage
#define freeimage dbg_FreeImage

/*
Sound Functions
*/
/*#define LoadSound dbg_LoadSound
#define loadsound dbg_LoadSound

#define FreeSound dbg_FreeSound
#define freesound dbg_FreeSound*/


#define Exit dbg_ReportAndExit
#define exit dbg_ReportAndExit