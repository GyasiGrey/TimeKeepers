/*
 * XMLParse.vc
 *
 * Parses a simple XML file. Simple means:
 *
 *
 * 1) Must be well formed
 * 2) No attributes
 * 3) No short tags
 * 4) No extra white space
 *
 * Once the XML has been read, the resulting data is put in sXMLParseResult
 *
 */
 
 //#define XML_PARSE_MAX_RESULTS	200
 
 //hold the nodes gathered from the XML on last call
 //string sXMLParseResult[XML_PARSE_MAX_RESULTS];
 
 //clears the result array
 /*void XMLParseClearResults()
 {
 	int i;
 	
 	for(i=0;i<XML_PARSE_MAX_RESULTS;i++)
 	{
 		sXMLParseResult[i] = "";
 	}
 }*/
 
 //gets the data we want!
 int XMLParseGetNodes(string XML, string node)
 {
 	string start = "<" + node + ">";
	string end = "</" + node + ">";

	int arrayIndex = 0;
	int numNodes = strstr(start, XML);

	int startIndex;
	int endIndex;
	
	int startCrop;
	int endCrop;
	
	string nodeValue;
	
	int retVal = DictNew();
	
	//first clear results
	//XMLParseClearResults();

	//hmm...might want to change this from psuedo code to <i>real</i> code
	while(arrayIndex < numNodes)
	{
		startIndex = strat(start, xml, arrayIndex);
		endIndex = strat(end, xml, arrayIndex);
		
		startCrop = startindex+len(start);
		endCrop = endIndex-startCrop;

		nodeValue = mid(xml, startCrop, endCrop);

		//sXMLParseResult[arrayIndex] = nodeValue;
		
		//add this item to the dictionary
		DictSetString(retVal, str(arrayIndex), nodeValue);

		arrayIndex++;	//increment arrayIndex (weeeeee!!)
	}	
	
	return retVal;
}


//gets the inner text of a node sNode at index nIndex from dictionary nDict
string XMLParseGetNodeIndex(string sNode, int nIndex, int nDict)
{
	int tmpDict;
	string sRetval;
	
	tmpDict = XmlParseGetNodes(DictGetString(nDict, str(nIndex)), sNode);
	sRetval = DictGetString(tmpDict, "0");
	
	DictFree(tmpDict);
	
	return sRetval;
}