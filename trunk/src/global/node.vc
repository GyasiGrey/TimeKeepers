#define QUEUE_LEN 256
#define NUM_NODES 128
#define INFINITY 65534

int numGraphNodes;

struct Node
{
	int nX;
	int nY;
	int nChildNodes[NUM_NODES]; //list of nodes that this node is connected to
}

Node Nodes[NUM_NODES];

int nDistances[NUM_NODES];
int nPrevious[NUM_NODES];

//Create a queue P
string queue[QUEUE_LEN];


/*
From Wikipedia
 1  function Dijkstra(Graph, source):
 2      for each vertex v in Graph:           // Initializations
 3          dist[v] := infinity               // Unknown distance function from source to v
 4          previous[v] := undefined          // Previous node in optimal path from source
 5      dist[source] := 0                     // Distance from source to source
 6      Q := the set of all nodes in Graph    // All nodes in the graph are unoptimized - thus are in Q
 7      while Q is not empty:                 // The main loop
 8          u := node in Q with smallest dist[]
 9          remove u from Q
10          for each neighbor v of u:         // where v has not yet been removed from Q.
11              alt := dist[u] + dist_between(u, v)
12              if alt < dist[v]              // Relax (u,v)
13                  dist[v] := alt
14                  previous[v] := u
15      return previous[]

Path from start to end
1  S := empty sequence
2  u := target
3  while defined previous[u]
4      insert u at the beginning of S
5      u := previous[u]
*/

/*
Create a queue P
 add the start node S, to P giving it one element
 Until first path of P ends with G, or P is empty
	extract the first path from P
	extend the path one step to all neighbors creating X new paths
	reject all paths with loops
	add each remaining new path to the BACK of P
 If G found -> success. Else -> failure.	
 */
string Dijkstra(int startNode, int destNode)
{
	int i, u, v, alt;
	string retval;
	
	for(i=0;i<NUM_NODES;i++)
	{
		nDistances[i] = INFINITY;	//infinity
		nPrevious[i] = -1;
	}
	
	nDistances[startNode] = 0;
	
	EmptyQueue();
	
	//enqueue all nodes
	for(i=0;i<numGraphNodes;i++)
	{
		Enqueue(str(i));
	}

	while(!IsQueueEmpty())
	{
		u = NodeWithShortestDistance();
		DequeueValue(str(u));
		
		for(v=0;v<NUM_NODES && Nodes[u].nChildNodes[v] != -1;v++)
		{
			alt = nDistances[u] + DistanceXY(Nodes[u].nX, Nodes[u].nY, Nodes[Nodes[u].nChildNodes[v]].nX, Nodes[Nodes[u].nChildNodes[v]].nY);
			
			if(alt < nDistances[Nodes[u].nChildNodes[v]])
			{
				nDistances[Nodes[u].nChildNodes[v]] = alt;
				nPrevious[Nodes[u].nChildNodes[v]] = u;
			}
		}
	}
	
	retval = "";
	u = destNode;
	
	while(nPrevious[u] >= 0)
	{
		retval = str(u) + " " + retval;
		u = nPrevious[u];
	}
	
	return retval;
}

int NodeWithShortestDistance()
{
	//linear search...implement as sort if necessary
	int i, shortestNode, shortestDistance;
	
	shortestNode = -1;
	shortestDistance = INFINITY+1;
	
	for(i=0;i<QUEUE_LEN && strcmp(queue[i], "") != 0 ;i++)
	{
		if(nDistances[val(queue[i])] < shortestDistance)
		{
			shortestNode = val(queue[i]);
			shortestDistance = nDistances[val(queue[i])];
		}
	}
	
	return shortestNode;
}

//finds the node closest to xy
int ClosestNode(int x, int y)
{
	int i, closenode, closedist;
	
	closenode = 0;

	closedist = DistanceXY(Nodes[0].nX, Nodes[0].nY, x, y);
	

	for(i=0;i<numGraphNodes;i++)
	{
		if(DistanceXY(Nodes[i].nX, Nodes[i].nY, x, y) < closedist)
		{
			closenode = i;
			closedist = DistanceXY(Nodes[i].nX, Nodes[i].nY, x, y);
		}
	}
	
	return closenode;
}

void Goto(int e, int x, int y)
{
	int start, end, j;
	int enemyIndex;

	//find the node closest to you
	start = ClosestNode(entity.x[e], entity.y[e]);
	//find the node closest the target
	end = ClosestNode(x, y);
	
	enemyIndex = GetEnemyIndex(e);
	
	Enemies[enemyIndex].sNodePath = Dijkstra(start, end);
	Enemies[enemyIndex].sNodeIndex = 0;
}

int IsQueueEmpty()
{
	if(strcmp(queue[0], "") == 0)
		return 1;
	else
		return 0;
}

void EmptyQueue()
{
	int i;
	
	for(i=0;i<QUEUE_LEN;i++)
	{
		queue[i] = "";
	}
}

void Enqueue(string s)
{
	int i;
	
	//look for the first blank item in the list
	for(i=0;i<QUEUE_LEN;i++)
	{
		if(strcmp(queue[i], "") == 0)
		{
			queue[i] = s;
			return;
		}
	}
	
	exit("node.vc: Queue to small - Increase QUEUE_LEN");
}

string Dequeue()
{
	string retval;
	int i;
	
	//grab the first item off the list
	//then cycle everything up one
	retval = queue[0];
	
	for(i=0;i<QUEUE_LEN-1;i++)
	{
		queue[i] = queue[i+1];
	}
	
	
	return retval;
}

string DequeueValue(string value)
{
	string retval;
	int i, j;
	//find item where value = value
	//then cycle everything up one to remove it

	for(j=0;j<QUEUE_LEN;j++)
	{
		if(strcmp(queue[j], value) == 0)
		{
			retval = queue[j];

			for(i=j;i<QUEUE_LEN-1;i++)
			{
				queue[i] = queue[i+1];
			}

			return retval;
		}
	}
	
	return "";
}

void LoadGraph(string file)
{
	int hnd;
	int i,j;
	
	Error("Loading pathfinding graph - " + file);
	
	if(FileExists(file))
	{
		hnd = FileOpen(file, FILE_READ);

		numGraphNodes = FileReadQuad(hnd);

		for(i=0;i<numGraphNodes;i++)
		{
			Nodes[i].nX = FileReadQuad(hnd);
			Nodes[i].nY = FileReadQuad(hnd);

			for(j=0;j<NUM_NODES;j++)
			{
				Nodes[i].nChildNodes[j] = FileReadQuad(hnd);
			}
		}

		FileClose(hnd);
	}
	else
	{
		numGraphNodes = 0;
		Error("Could not find pathfinding graph file - " + file);
	}
}

void SaveGraph(string filename)
{
	int hnd = FileOpen(filename, FILE_WRITE);
	int i,j;
	
	FileWriteQuad(hnd, numGraphNodes);

	
	for(i=0;i<numGraphNodes;i++)

	{
		FileWriteQuad(hnd, Nodes[i].nX);
		FileWriteQuad(hnd, Nodes[i].nY);
		
		for(j=0;j<NUM_NODES;j++)
		{
			FileWriteQuad(hnd, Nodes[i].nChildNodes[j]);
		}
	}
	
	FileClose(hnd);
}
