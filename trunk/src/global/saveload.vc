//holds the functions for saving and loading files
//see "save document.txt"

int nLoadedPlayerX, nLoadedPlayerY;
int iSaveScreenShot;	//screenshot of the saved game
string sAreaName; //human readable area name (Base, Mission 1, etc) Shows in load/save game menus

int bCanSave = 1;

string tmpNotes[MAX_NOTES];
string tmpComm[MAX_COMM_LOGS];
objective tmpObjectives[MAX_OBJECTIVES];

int tmpEnemiesKilled;
int tmpEnemiesTranqd;
int tmpSilentKills;
int tmpMedkitsUsed;

int tmpMissionStartTime;
int tmpEnemyLogicTimer;

//saves the game to the filename passed. If the save fails it returns 0, else 1
int SaveGame(string filename)
{
	if(!CanSave())
		return 1;
		
	//would be so much easier if I had serialization...but alas
	int hndl = FileOpen(filename, FILE_WRITE);
	int i, x, y;
	
	
	if(hndl)
	{
		//yay verge updates! (because before this I would have to do this differently (although now, I can't seem to remember why (I think because there was a bug in FileWriteWord?))

		FileWriteWord(hndl, SAVE_VERSION);			//write the save version, for sanity sake

		iSaveScreenShot	= NewImage(SAVE_SCREEN_SHOT_WIDTH, SAVE_SCREEN_SHOT_HEIGHT);
		ScaleBlit(0, 0, SAVE_SCREEN_SHOT_WIDTH, SAVE_SCREEN_SHOT_HEIGHT, screen, iSaveScreenShot); //scale the screen to the image

		//screenshot
		for(x=0;x<SAVE_SCREEN_SHOT_WIDTH;x++)
			for(y=0;y<SAVE_SCREEN_SHOT_HEIGHT;y++)
				FileWriteQuad(hndl, GetPixel(x, y, iSaveScreenShot));
				
		FreeImage(iSaveScreenShot);
		
		//Month/Day/Year
		FileWriteLn(hndl, str(sysdate.month)+"/"+str(sysdate.day)+"/"+str(sysdate.year));
		//Hours:Minutes:Seconds
		FileWriteLn(hndl, GetTime12String());
		//Area
		FileWriteLn(hndl, sAreaName);
		

		FileWriteLn(hndl, curmap.path);			//write current map - RAWRAWR. I was using FileWrite instead of FileWriteLn. This bug made me STOP WORKING on the game. For 5 MONTHS or so.
		for(i=0;i<NUM_FLAGS;i++)			//write the flags
		{
			FileWriteWord(hndl, nFlags[i]);
		}

		FileWriteWord(hndl, nHealth);			//player health
		FileWriteWord(hndl, nNumMedkits);		//number of medkits
		//weapons player has and ammo
		for(i=0;i<MAX_WEAPONS;i++)
		{
			FileWriteByte(hndl, nHasWeapon[i]);
			FileWriteQuad(hndl, nAmmo[i]);
		}
		FileWriteWord(hndl, nEquipedWeapon);		//current equiped weapon
		FileWriteWord(hndl, nLoot);			//current loot ammount
		FileWriteWord(hndl, entity.x[nPlayerEnt]);	//player x
		FileWriteWord(hndl, entity.y[nPlayerEnt]);	//player y
	
		//ENEMY STUFF
		FileWriteWord(hndl, nNumEnemies);
		for(i=0;i<nNumEnemies;i++)
		{
			SaveEnemy(hndl, i);
		}
		
		//Doors
		for(i=0;i<MAX_DOORS;i++)
		{
			FileWriteByte(hndl, Doors[i].nOpen);
			FileWriteQuad(hndl, Doors[i].nLockStr);
		}
		
		//Loot
		for(i=0;i<MAX_LOOT;i++)
		{
			FileWriteByte(hndl, Loots[i].nStolen);
		}
		
		//AutoSaves
		for(i=0;i<MAX_AUTOSAVE;i++)
		{
			FileWriteByte(hndl, autosave[i].nActive);
		}
		
		//Notes
		i=0;
		while(i<MAX_NOTES && strcmp(sNotes[i], "") != 0)
		{
			FileWriteString(hndl, sNotes[i]);
			i++;
		}
		FileWriteString(hndl, "END");
		
		//Comm logs
		i=0;
		while(i<MAX_COMM_LOGS && strcmp(sCommLogs[i], "") != 0)
		{
			FileWriteString(hndl, sCommLogs[i]);
			i++;
		}
		FileWriteString(hndl, "END");
		
		//Objectives
		for(i=0;i<MAX_OBJECTIVES;i++)
		{
			FileWriteString(hndl, objectives[i].sTitle);
			FileWriteString(hndl, objectives[i].sName);
			FileWriteByte(hndl, objectives[i].bActive);
			FileWriteByte(hndl, objectives[i].bComplete);
		}
		
		//tracked stats
		FileWriteByte(hndl, nEnemiesKilled);
		FileWriteByte(hndl, nEnemiesTranqd);
		FileWriteByte(hndl, nSilentKills);
		FileWriteByte(hndl, nMedkitsUsed);

		//timers
		FileWriteQuad(hndl, vcTimer[TIMER_MISSION_TIME_SPENT].nTick);
		FileWriteQuad(hndl, vcTimer[TIMER_ENEMY_LOGIC].nTick);
		
		FileClose(hndl);
		
		//sync achievements
		//AchivementSyncDown();
		//AchivementSyncUp();
		
		return 0;	
	}

	return 1;
}

int LoadGame(string filename)
{
	int hndl = FileOpen(filename, FILE_READ);
	int tmp, i, x, y, enemiesToLoad;
	string mapstr, tmpstr;
	
	if(hndl)
	{
		tmp = FileReadWord(hndl);			//version number
		if(tmp != SAVE_VERSION)
		{
			//check for wrong save version (update old saves to new version)
			Exit("Incompatible save version! Should be '" + str(SAVE_VERSION) + "', got '" + str(tmp) + "'");
		}
		
		//read the screenshot data, but don't keep it
		for(x=0;x<SAVE_SCREEN_SHOT_WIDTH;x++)
			for(y=0;y<SAVE_SCREEN_SHOT_HEIGHT;y++)
				tmp = FileReadQuad(hndl);
		
		mapstr = FileReadLn(hndl);		//month/day/year - ignore
		mapstr = FileReadLn(hndl);		//hours:minutes:seconds am/pm - ignore
		mapstr = FileReadLn(hndl);		//area ignore
		
		mapstr = FileReadLn(hndl);			//map name
		
		for(i=0;i<NUM_FLAGS;i++)			//flags
		{
			nFlags[i] = FileReadWord(hndl);
		}
		
		nHealth = FileReadWord(hndl);			//player health
		nNumMedkits = FileReadWord(hndl);		//number of medkits
		
		//weapons player has and ammo
		for(i=0;i<MAX_WEAPONS;i++)
		{
			nHasWeapon[i] = FileReadByte(hndl);
			nAmmo[i] = FileReadQuad(hndl);
		}
		nEquipedWeapon = FileReadWord(hndl);		//current equiped weapon
		nLoot = FileReadWord(hndl);			//current loot ammount
		nLoadedPlayerX = FileReadWord(hndl);			//player x
		nLoadedPlayerY= FileReadWord(hndl);			//player y
		
		//ENEMY STUFF
		enemiesToLoad = FileReadWord(hndl);
		nNumLoadedEnemies=0;
		for(i=0;i<enemiesToLoad;i++)
		{
			LoadEnemy(hndl, i);
		}
		
		for(i=0;i<MAX_DOORS;i++)
		{
			LoadedDoors[i].nOpen = FileReadByte(hndl);
			LoadedDoors[i].nLockStr = FileReadQuad(hndl);
		}
		
		for(i=0;i<MAX_LOOT;i++)
		{
			LoadedLoots[i].nStolen = FileReadByte(hndl);
		}
		
		for(i=0;i<MAX_AUTOSAVE;i++)
		{
			LoadedAutoSave[i].nActive = FileReadByte(hndl);
		}

		//Notes
		i=0;
		for(i=0;i<MAX_NOTES;i++)
			tmpNotes[i]="";

		i = 0;
		tmpstr = FileReadString(hndl);
		while(i<MAX_NOTES && strcmp(tmpstr, "END") != 0)
		{
			tmpNotes[i] = tmpstr;
			tmpstr = FileReadString(hndl);
			i++;
		}
		
		//Comm logs
		i=0;
		for(i=0;i<MAX_COMM_LOGS;i++)
			tmpComm[i]="";

		i = 0;
		tmpstr = FileReadString(hndl);
		while(i<MAX_COMM_LOGS && strcmp(tmpstr, "END") != 0)
		{
			tmpComm[i] = tmpstr;
			tmpstr = FileReadString(hndl);
			i++;
		}
		
		//Objectives
		for(i=0;i<MAX_OBJECTIVES;i++)
		{
			tmpObjectives[i].sTitle = FileReadString(hndl);
			tmpObjectives[i].sName = FileReadString(hndl);
			tmpObjectives[i].bActive = FileReadByte(hndl);
			tmpObjectives[i].bComplete = FileReadByte(hndl);
		}
		
		//tracked stats
		tmpEnemiesKilled = FileReadByte(hndl);
		tmpEnemiesTranqd = FileReadByte(hndl);
		tmpSilentKills = FileReadByte(hndl);
		tmpMedkitsUsed = FileReadByte(hndl);

		tmpMissionStartTime = FileReadQuad(hndl);
		tmpEnemyLogicTimer = FileReadQuad(hndl);

		//go to the new map, but set bLoadingGame=true first so the new map knows to push the values in 
		//the temp enemy array into the real enemy array (because if I do a map(mapstr) here it will go to the new map
		//and stop execution, preventing the enemy data from being put in the correct array)
		bLoadingGame = 1;
		FileClose(hndl);
		
		EmptyCommQueue();
		sCommText = "";
		
		nPlayerAnimating = 0;

		//sync achievements
		//AchivementSyncDown();
		//AchivementSyncUp();

		
		map(mapstr);
		
		return 0;
	}
	
	return 1;
}

//save all the data about an enemy
void SaveEnemy(int hndl, int i)
{
	FileWriteWord(hndl, Enemies[i].nHp);				//enemy health
	FileWriteWord(hndl, entity.x[Enemies[i].nEntity]);		//enemy x
	FileWriteWord(hndl, entity.y[Enemies[i].nEntity]);		//enemy y
	FileWriteQuad(hndl, Enemies[i].nWeapon);			//enemy weapon	(quad because the weapon could be -1)
	FileWriteWord(hndl, Enemies[i].nMode);				//enemy AI state
	FileWriteWord(hndl, Enemies[i].nCoolDownStart);			//last time enemy shoot its weapon
	FileWriteWord(hndl, Enemies[i].nAlertStart);
	FileWriteWord(hndl, Enemies[i].nSearchStart);
	FileWriteWord(hndl, Enemies[i].nTranqEnd);
	FileWriteWord(hndl, Enemies[i].nSoundStart);
	FileWriteWord(hndl, Enemies[i].nActive);
	FileWriteWord(hndl, Enemies[i].nAIType);
	FileWriteString(hndl, Enemies[i].sOriginalMoveString);
	FileWriteString(hndl, Enemies[i].sChrFile);
	FileWriteString(hndl, Enemies[i].sAIFunc);
	FileWriteWord(hndl, Enemies[i].nTemplate);
	FileWriteWord(hndl, Enemies[i].nOriginalLookDirection);
	FileWriteWord(hndl, Enemies[i].bCanSpeak);
	FileWriteWord(hndl, Enemies[i].bCanBeTranqd);
	FileWriteWord(hndl, Enemies[i].bCanHear);
	FileWriteWord(hndl, Enemies[i].nTargetPriority);
}

//load enemy data into a temp array. Will be put into real array after the call to map();
void LoadEnemy(int hndl, int i)
{
	LoadedEnemies[i].nHp = FileReadWord(hndl);		//enemy health
	LoadedEnemies[i].nSaveX = FileReadWord(hndl);		//enemy x
	LoadedEnemies[i].nSaveY = FileReadWord(hndl);		//enemy y
	LoadedEnemies[i].nWeapon = FileReadQuad(hndl);		//enemy weapon
	LoadedEnemies[i].nMode = FileReadWord(hndl);		//enemy AI state
	LoadedEnemies[i].nCoolDownStart = FileReadWord(hndl);		//last time enemy shoot its weapon
	LoadedEnemies[i].nAlertStart = FileReadWord(hndl);
	LoadedEnemies[i].nSearchStart = FileReadWord(hndl);
	LoadedEnemies[i].nTranqEnd = FileReadWord(hndl);
	LoadedEnemies[i].nSoundStart = FileReadWord(hndl);
	LoadedEnemies[i].nActive = FileReadWord(hndl);
	LoadedEnemies[i].nAIType = FileReadWord(hndl);
	LoadedEnemies[i].sOriginalMoveString = FileReadString(hndl);
	LoadedEnemies[i].sChrFile = FileReadString(hndl);
	LoadedEnemies[i].sAIFunc = FileReadString(hndl);
	LoadedEnemies[i].nTemplate = FileReadWord(hndl);
	LoadedEnemies[i].nOriginalLookDirection = FileReadWord(hndl);
	LoadedEnemies[i].bCanSpeak = FileReadWord(hndl);
	LoadedEnemies[i].bCanBeTranqd = FileReadWord(hndl);
	LoadedEnemies[i].bCanHear = FileReadWord(hndl);
	LoadedEnemies[i].nTargetPriority = FileReadWord(hndl);

	
	nNumLoadedEnemies++;
}

//moves data out of the loaded arrays into the real arrays
//I HATE this function. HATE. Must find a better way to do this...
void MoveLoadedData()
{
	int i, e;
	//only do this if we just loaded a game
	if(bLoadingGame)
	{
		ClearNotes();
		ClearObjectives();
		ClearCommLog();
		
		//enemies
		for(i=0;i<nNumLoadedEnemies;i++)
		{
			//CreateEnemy(int x, int y, int face, int template, string movestring, string chrfile)
			
			e = CreateEnemy(LoadedEnemies[i].nSaveX/16, LoadedEnemies[i].nSaveY/16, LoadedEnemies[i].nOriginalLookDirection, LoadedEnemies[i].nTemplate, LoadedEnemies[i].sOriginalMoveString, LoadedEnemies[i].sChrFile);
			Enemies[e].nHp = LoadedEnemies[i].nHp;
			entity.x[Enemies[e].nEntity] = LoadedEnemies[i].nSaveX;	//get more precise XY coords as the entity spawn call in CreateEntity only takes tile coords, not pixel coords
			entity.y[Enemies[e].nEntity] = LoadedEnemies[i].nSaveY;
			Enemies[e].nWeapon = LoadedEnemies[i].nWeapon;
			Enemies[e].nMode = LoadedEnemies[i].nMode;
			Enemies[e].nCoolDownStart = LoadedEnemies[i].nCoolDownStart;
			Enemies[e].nAlertStart = LoadedEnemies[i].nAlertStart;
			Enemies[e].nSearchStart = LoadedEnemies[i].nSearchStart;
			Enemies[e].nTranqEnd = LoadedEnemies[i].nTranqEnd;
			Enemies[e].nSoundStart = LoadedEnemies[i].nSoundStart;
			Enemies[e].nActive = LoadedEnemies[i].nActive;
			Enemies[e].sAIFunc = LoadedEnemies[i].sAIFunc;

			if(Enemies[e].nMode == MODE_ALERT)
			{
				MakeAlert(e);
			}
			
			//prevent dead enemies from moving or obstructing
			if(!Enemies[e].nActive)
			{
				StopEnemy(e);
				entity.obstruct[Enemies[e].nEntity] = 0;
			}
		}
		
		//doors
		for(i=0;i<MAX_DOORS;i++)
		{
			Doors[i].nOpen = LoadedDoors[i].nOpen;
			Doors[i].nLockStr = LoadedDoors[i].nLockStr;
			
			if(Doors[i].nOpen == 1)
			{
				//make sure the doors obs is off
				ManualOpenDoor(i);
			}
		}
		
		//loot
		for(i=0;i<MAX_LOOT;i++)
		{
			Loots[i].nStolen = LoadedLoots[i].nStolen;
		}
		
		for(i=0;i<MAX_AUTOSAVE;i++)
		{
			autosave[i].nActive = LoadedAutoSave[i].nActive;
		}
		
		
		//also place the player where they are supposed to be
		entity.x[nPlayerEnt] = nLoadedPlayerX;
		entity.y[nPlayerEnt] = nLoadedPlayerY;
		
		for(i=0;i<MAX_NOTES;i++)
		{
			sNotes[i] = tmpNotes[i];
		}
		
		for(i=0;i<MAX_COMM_LOGS;i++)
		{
			sCommLogs[i] = tmpComm[i];
		}
		
		for(i=0;i<MAX_OBJECTIVES;i++)
		{
			objectives[i].sTitle = tmpObjectives[i].sTitle;
			objectives[i].sName = tmpObjectives[i].sName;
			objectives[i].bActive = tmpObjectives[i].bActive;
			objectives[i].bComplete = tmpObjectives[i].bComplete;
		}
		
		nEnemiesKilled = tmpEnemiesKilled;
		nEnemiesTranqd = tmpEnemiesTranqd;
		nSilentKills = tmpSilentKills;
		nMedkitsUsed = tmpMedkitsUsed;

		
		vcTimer[TIMER_MISSION_TIME_SPENT].nTick = tmpMissionStartTime;
		vcTimer[TIMER_ENEMY_LOGIC].nTick = tmpEnemyLogicTimer;
	}
}

//Return the number of save games - makes use of ListFilePattern() to avoide problems with deletion
//that said, renaming files will still probably cause problems
int CountSaveGames()
{
	/*int count = 0; // Assume first save exists
	int file = FileOpen("save/save000.sav", FILE_READ); // Trys to open the save file 000
	while(file) // As long as the save can be opened
	{
		FileClose(file); // Close the current save
		count++; // Increase the number of saves found
		file = FileOpen("save/save"+ThreeDigit(count)+".sav", FILE_READ); // Try to open next save
	}
	return count-1;*/
	
	//weee
	return TokenCount(ListFilePattern("save/*.sav"), "|")-1;
}

int CanSave()
{
	//returns true if we can save here, false if we can't
	if(!CommQueueEmpty())
		return 0;
		
	if(strcmp(sCommText, "")!=0)
		return 0;
		
	/*if(nGamePaused)
		return 0;*/
		
	if(!bCanSave)
		return 0;
		
	return 1;
}

void QuickSave()
{
	string qsavetext;	//will hold "Quick Save." or "Quick Save Failed!" dependent on if it worked or not
	
	//Steps through all the files save*.sav
	//and finds the highest index. 
	//Increment this index and save a new game with it
	int numsaves = CountSaveGames()+1;

	//first see if we can save
	if(!CanSave())
		qsavetext = "Can't Save Here!";
	else
	{
		if(SaveGame("save/save"+ThreeDigit(numsaves)+".sav")==0)
			qsavetext = "Quick Save.";
		else
			qsavetext = "Quick Save Failed!";
	}
		 
	lucentTextFade(160-(TextWidth(nTinyFont, qsavetext)/2), 120-(FontHeight(nTinyFont)/2), qsavetext, nTinyFont, RGB(255, 255, 255), 0);
}

void QuickLoad()
{
	//Steps through all the files save*.sav
	//and finds the highest index
	//Loads that file
	int numsaves = CountSaveGames();

	string qsavetext = "Quick Load.";
	lucentTextFade(160-(TextWidth(nTinyFont, qsavetext)/2), 120-(FontHeight(nTinyFont)/2), qsavetext, nTinyFont, RGB(255, 255, 255), 0);

	LoadGame("save/save"+ThreeDigit(numsaves)+".sav");
}