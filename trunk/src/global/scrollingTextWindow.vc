#define SCROLLING_TEXT_WINDOW_MAX_LINES			100

string sTextLines[SCROLLING_TEXT_WINDOW_MAX_LINES];	//all the text that could be drawn to the PDA
int nScrollingTextStartIndex;				//position in the array of strings of the first string drawn
int nScrollingTextOverlap = 30;				//amount of space at the top of the scrollable area that will be covered
int nScrollingTextX = 8;				//x position of the current string being drawn
int nScrollingTextY = nScrollingTextOverlap;		//y position of the current string being drawn

void DrawScrollingTextWindow(int nDestination, int nTextFont, int nWidth, int nHeight)
{
	int i;

	i = nScrollingTextStartIndex;
	nScrollingTextY = nScrollingTextOverlap;	//y position of the current string being drawn

	while(nScrollingTextY < nHeight && i < SCROLLING_TEXT_WINDOW_MAX_LINES)
	{
		PrintString(nScrollingTextX, nScrollingTextY, nDestination, nTextFont, sTextLines[i]);

		nScrollingTextY += ScrollingTextBlockHeight(i, nWidth, nTextFont);

		i++;
	}
}

/*void InputCrap()
{
	if(down)
	{
		if(can scroll down)
		{
			nY--;

			if(TextBlockHeight(nStartIndex) + nY >= nOverlap)
			{
				nStartIndex++;
				nY = nOverlap;
			}
		}
	}


	if(up)
	{
		if(nY != 0 && nStartIndex != 0)
		{
			nY++;

			if(nY >= nOverlap)
			{
				nStartIndex--;
				nY = 0;
			}
		}
	}
}
*/

int ScrollingTextBlockHeight(int i, int nWidth, int nTextFont)
{
	//calculate the height of the string at sTextLines[i] from FontHeight() and WrapText() + a few pixels of spacing between each string
	string sWrapped = WrapText(nTextFont, sTextLines[i], nWidth);
	int nBreaks = strstr(chr(10), sWrapped) + 1;			//+1 since strstr does not count the last line as a new line

	return nBreaks * FontHeight(nTextFont);
}

void CopyNotesToScrollingText()
{
	int i;
	
	for(i=0;i<SCROLLING_TEXT_WINDOW_MAX_LINES;i++)
	{
		sTextLines[i] = sNotes[i];
	}
}