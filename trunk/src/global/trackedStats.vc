/*
	-Time spent in mission
	-Enemies killed
	-Enemies tranq'd
	-Silent kills
	-Amount stolen
	-Shots fired
	-Damage delt
	-Damage recieved
	-Medkits used
	*/

//this matches with the game id in the MySQL DB
#define LEADERBOARD_GAME_ID				1

//these match with the score id's in the MySQL DB
#define LEADERBOARD_SCORE_LOOT			1
#define LEADERBOARD_SCORE_KILLS			2
#define LEADERBOARD_SCORE_TRANQS		3
#define LEADERBOARD_SCORE_SILENT_KILLS		4
#define LEADERBOARD_SCORE_TIME			5
#define LEADERBOARD_SCORE_MEDKITS		6

int nEnemiesKilled;
int nEnemiesTranqd;
int nSilentKills;
int nMedkitsUsed;

int nLocksPicked;	//not used for leaderboards, just an achivement


int bSendTrackedStats;	//if ==1 user wants to send stats to the leaderboards
string sTrackedStatsUsername;
string sTrackedStatsPassword;

int nParTimes[10];


void InitParTimes()
{
	nParTimes[0] = 30000;	//mission 1 - 5 minutes		100=1sec 1000=10sec 6000=1min 30000=5min
	nParTimes[1] = 90000;	//mission 2 - 15 minutes
}

void ResetTrackedData()
{
	nEnemiesKilled = 0;
	nEnemiesTranqd = 0;
	nSilentKills = 0;
	nMedkitsUsed = 0;
	nLocksPicked = 0;
	vcTimer[TIMER_MISSION_TIME_SPENT].nTick = 0;
}

void SendMissionData(int mission)
{
	//to hold score data once pieced together
	string scoreData;
	int tryagain=0, retval;
	
	if(bSendTrackedStats == 1)
	{
		while(tryagain==0)
		{
			scoreData = str(LEADERBOARD_SCORE_LOOT) + "~" + str(nLoot);
			scoreData += "~" + str(LEADERBOARD_SCORE_KILLS) + "~" + str(nEnemiesKilled);
			scoreData += "~" + str(LEADERBOARD_SCORE_TRANQS) + "~" + str(nEnemiesTranqd);
			scoreData += "~" + str(LEADERBOARD_SCORE_SILENT_KILLS) + "~" + str(nSilentKills);
			scoreData += "~" + str(LEADERBOARD_SCORE_TIME) + "~" + TicksToHMSC(vcTimer[TIMER_MISSION_TIME_SPENT].nTick);
			scoreData += "~" + str(LEADERBOARD_SCORE_MEDKITS) + "~" + str(nMedkitsUsed);

			retval = sendScore(sTrackedStatsUsername, sTrackedStatsPassword, LEADERBOARD_GAME_ID, scoreData, str(mission), str(CalculateMissionScore(mission)));
			
			if(retval)
			{
				OpenMessageMenuHold("Score data sent to server successfully!");
				tryagain = 1;	//woops
				
				Error("Score data sent to server successfully!");
			}
			else if(retval == -1)
			{
				OpenMessageMenuHold("Password rejected.");
			}
			else
			{
				tryagain = OpenMessageChoiceMenu("Score data was not sent successfully. Would you like to try again?", "Yes|No");

				Error("Score data didn't make it across the internets :(");
			}
			
			AchivementSyncUp();
		}
	}
}

void LoadTrackedProfile()
{
	int hndl;

	hndl = FileOpen("profile.sav", FILE_READ);
	
	if(hndl)
	{
		bSendTrackedStats = FileReadByte(hndl);
		sTrackedStatsUsername = FileReadString(hndl);
		sTrackedStatsPassword = FileReadString(hndl);
	}
	else
	{
		//file was not found. Blank out the data, the game will ask the user for it once it's needed
		bSendTrackedStats = 0;
		sTrackedStatsUsername = "";
		sTrackedStatsPassword = "";
	}
}

void GetTrackedLogin()
{
	int res, again=1;
	string username, pass, sres;

	while(again == 1)
	{
		//ask player if they want to track their stats - Yes, No, No and don't ask me again you attention whore! Also, register new user
		res = OpenMessageChoiceMenu("Would you like to login to track your stats?", "Yes|No|No, don't ask again.|New User");

		switch(res)
		{
			case 0:	//yes
				bSendTrackedStats = 1;
				//get the username and password
				sTrackedStatsUsername = MenuType("Enter Username:", 15);
				sTrackedStatsPassword = MenuType("Enter Password:", 25);
				
				sres = GetUrlText(LEADERBOARD_URL + "userLog.php?user=" + sTrackedStatsUsername + "&pass=" + sTrackedStatsPassword);
				
				if(strcmp(sres, "couldn't open url") == 0)
				{
					OpenMessageMenuHold("The server did not respond. Is your internet connection working?");
				}
				else if(strcmp(sres, "-1") == 0)
				{
					OpenMessageMenuHold("Password rejected.");
					again = 1;
				}
				else
				{
					again = 0;
				}

			case 1: //no
				bSendTrackedStats = 0;

				sTrackedStatsUsername = "";
				sTrackedStatsPassword = "";

				again = 0;

			case 2: //no and go kill your self
				bSendTrackedStats = 2;

				sTrackedStatsUsername = "";
				sTrackedStatsPassword = "";

				again = 0;
				
			case 3: //register
				RegisterNewUsername();

				if(bSendTrackedStats == 0)
					again = 1;
				else
					again = 0;
		}
	}
	
	SaveBasicProfileData();
	
	if(bSendTrackedStats)
	{
		AchivementSyncDown();
	}
}

void SaveBasicProfileData()
{
	//write out the user's choice and username/pass to profile.sav
	int profileFile = FileOpen("profile.sav", FILE_WRITE);
	
	if(profileFile)
	{
		FileWriteByte(profileFile, bSendTrackedStats);
		FileWriteString(profileFile, sTrackedStatsUsername);
		FileWriteString(profileFile, sTrackedStatsPassword);
	}
}


//does the actuall request to the server to create a new user. Returns an int error code dependant on the the result
//==0 no error ==1 username conflict ==2 can't connect ==3 other error (probably server side screwup)
int RegisterNewUsernameHelp()
{
	string retval;
	int errMode;
	
	retval = GetUrlText(LEADERBOARD_URL + "upload.php?register=" + sTrackedStatsUsername + "|" + sTrackedStatsPassword);

	if(strcmp(retval, "ERR_USERNAME_CONFLICT") == 0)
		errMode = 1;
	else if(strcmp(retval, "couldn't open url") == 0)
		errMode = 2;
	else if(strcmp(retval, "ERR_SUCCESS") != 0)
		errMode = 3;
	else
		errMode = 0;

	return errMode;
}

void RegisterNewUsername()
{
	int again = 0;
	int errMode;
	
	//get the username and password - initial run
	sTrackedStatsUsername = MenuType("Enter Username:", 15);
	sTrackedStatsPassword = MenuType("Enter Password:", 25);

	errMode = RegisterNewUsernameHelp();
	
	while(errMode !=0 && again == 0)
	{
		switch(errMode)
		{
			case 1:
				again = OpenMessageChoiceMenu("That username is already taken. Would you like to try again?", "Yes|No");
			case 2:
				again = OpenMessageChoiceMenu("The server did not respond. Make sure you have an internet connection. Would you like to try again?", "Yes|No");
			case 3:
				again = OpenMessageChoiceMenu("Unknown error. Would you like to try again?", "Yes|No");
		}
		
		if(again == 0)
		{
			//get the username and password
			sTrackedStatsUsername = MenuType("Enter Username:", 15);
			sTrackedStatsPassword = MenuType("Enter Password:", 25);
	
			errMode = RegisterNewUsernameHelp();
		}
	}

	if(again==0)
	{
		bSendTrackedStats = 1;
		
		OpenMessageMenuHold("Username has been registered!");
	}
	else
		bSendTrackedStats = 0;
}

//calculates a final score from all collected stats to be sent to the server
int CalculateMissionScore(int mission)
{
	int nFinalScore;
	
	if(mission < 10)
	{
		nFinalScore = (nEnemiesKilled * 25) + (nSilentKills * 50) + (nEnemiesTranqd * 100) + (nLoot * 10) - (nMedkitsUsed *10);

		//modify score for time spent. If the time for a mission is under par give the player a bonus.
		 if(vcTimer[TIMER_MISSION_TIME_SPENT].nTick < nParTimes[mission])
			nFinalScore += 1000;
	}
	else
		nFinalScore = nArenaScore;
		
	return nFinalScore;
}