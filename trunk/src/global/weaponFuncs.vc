void FreeAimWeapon()
{
	int theta;
	
	//free aim!
	if(!bAimingLastTick)
	{
		nFreeAimX = entity.x[nPlayerEnt];
		nFreeAimY = entity.y[nPlayerEnt];
		entity.speed[nPlayerEnt] = 0;
	}

	if(up)
	{
		nFreeAimY-=2;
	}

	if(down)
	{
		nFreeAimY+=2;
	}

	if(left)
	{
		nFreeAimX-=2;
	}

	if(right)
	{
		nFreeAimX+=2;
	}
	
	if(DistanceXY(entity.x[nPlayerEnt], entity.y[nPlayerEnt], nFreeAimX, nFreeAimY)  > Weapons[nEquipedWeapon].nRange)
	{
		//r = weapon range
		//theta = atan2(DeltaY, DeltaX)
		//x = r cos (theta)
		//y = r sin (theta)
			
		theta = zatan2(nFreeAimY - entity.y[nPlayerEnt], nFreeAimX - entity.x[nPlayerEnt]);

		nFreeAimX = entity.x[nPlayerEnt] + ((Weapons[nEquipedWeapon].nRange * cos(theta)) / 65536);
		nFreeAimY = entity.y[nPlayerEnt] + ((Weapons[nEquipedWeapon].nRange * sin(theta)) / 65536);
	}
	
	anims[nTargetPointerAnim].x = nFreeAimX;
	anims[nTargetPointerAnim].y = nFreeAimY;
}

void ShootWeapon()
{
	//fire weapon
	if(BUTTON_SHOOT)
	{
		if(nAmmo[nEquipedWeapon] == 0)
		{
			//no ammo, play the out of ammo sound
			//guards can hear the click
			MakeSound(nPlayerEnt, 50);
			SoundNoAmmo();
			UnpressButtons();
		}
		else
		{
			if(timer > nShotAt+Weapons[nEquipedWeapon].nRecharge)
			{
				if(strcmp(sEntitiesInRange, "")!=0)
				{
					//let the player hold down the fire button on automatic weapons
					if(Weapons[nEquipedWeapon].nType != WEAPON_TYPE_AUTO)
						UnpressButtons();

					FireWeapon(nPlayerEnt, Enemies[nTargetIndex].nEntity);
				}
			}
		}
	}
}

int nDeltaX;
int nDeltaY;
int nDeltaXDecay;
int nDeltaYDecay;
int nThrownAnim;

void ThrowGrenade()
{
	if(nAmmo[nEquipedWeapon] == 0)
	{
		//no ammo, play the out of ammo sound
		//guards can hear the click
		MakeSound(nPlayerEnt, 50);
		SoundNoAmmo();
		UnpressButtons();
	}
	else
	{
		PlaySound(Weapons[nEquipedWeapon].nSound, 100);
		
		if(timer > nShotAt+Weapons[nEquipedWeapon].nRecharge)
		{
			nDeltaX = oF_divFF(oF_Whole2Fixed(nFreeAimX - entity.x[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));
			nDeltaY = oF_divFF(oF_Whole2Fixed(nFreeAimY - entity.y[nPlayerEnt]), oF_Whole2Fixed(Weapons[nEquipedWeapon].nFuseLength));

			if(entity.face[nPlayerEnt] == ENTITY_FACE_UP || entity.face[nPlayerEnt] == ENTITY_FACE_DOWN)
				nThrownAnim = LoadAnimationEX("grenadeUD.png", 8, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");
			else
				nThrownAnim = LoadAnimationEX("grenadeLR.png", 8, 8, entity.x[nPlayerEnt], entity.y[nPlayerEnt], "T1 F0 W20 F1 W20 R");

			CreateThrown(oF_Whole2Fixed(entity.x[nPlayerEnt]), oF_Whole2Fixed(entity.y[nPlayerEnt],) nDeltaX, nDeltaY, nThrownAnim, Weapons[nEquipedWeapon].nFuseLength, nEquipedWeapon, Weapons[nEquipedWeapon].sDetFunction);
			
			nAmmo[nEquipedWeapon]--;

			UnpressButtons();
		}
	}
}

void NullAim()
{
	anims[nTargetPointerAnim].x = -15;
	anims[nTargetPointerAnim].y = -15;
}

void NullShoot()
{
}

void GrenadeExplode()
{
	SoundGrenade();
	CreateDamageArea(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 50, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMin, Weapons[ThrownItems[nCurrentThrown].nWeapon].nDamageMax, 50);
	MakeSoundXY(oF_Fixed2Int(ThrownItems[nCurrentThrown].nX), oF_Fixed2Int(ThrownItems[nCurrentThrown].nY), 100);
	StartShake(2, 25);
	LoadAnimationEX("explode.png", 64, 64, oF_Fixed2Int(ThrownItems[nCurrentThrown].nX)-32, oF_Fixed2Int(ThrownItems[nCurrentThrown].nY)-32, "T1 F0 L25 W20 F1 L50 W20 F2 L75 W20 F3 W20");
}
