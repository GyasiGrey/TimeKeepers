int nHackingCertainty;
int nHackingCertaintyDelay = 75;
string sHackingRandomPassword[5];
int nHackingRandomPasswordIndex;	//must always be less then sHackingRandomPassword.Length
string sHackingCompleteFunction;	//the function to run once a hack is successfull
string sHackingAsseptPasswordText;
int nHackingPointerAnimation;

string sHackingMessage;

void OpenHackingMenu(string sCompleteFunc)
{
	SetPause(1);
	
	nHackingCertainty = 0;
	nHackingPointerAnimation = -1;
	
	sHackingCompleteFunction = sCompleteFunc;
	
	CreateMenu(35, 25, GetMenuTemplateIndex("MenuHacking"));
	
	nHackingRandomPasswordIndex = -1;
	
	sHackingMessage = "";
	
	HackingFirstMessage();
}

void MenuHackingDraw()
{
	int img;
	int i;
	
	img = CreateWindow("Terminal", 250, 160, nTerminalFont);
	
	PrintString(8, 16, img, nTerminalFont, WrapText(nTerminalFont, sHackingMessage, 230));
	
	for(i=0;i<=nHackingRandomPasswordIndex;i++)
	{
		PrintString(8, 42 + (i*FontHeight(nTerminalFont)), img, nTerminalFont, sHackingRandomPassword[i]);
	}
		
	PrintString(175, 130, img, nDigitalFont, ThreeDigit(nHackingCertainty) + "%");
	
	PrintString(20, 140, img, nTerminalFont, sHackingAsseptPasswordText);
	
	Blit(nMenuX, nMenuY, img, screen);
	
	FreeImage(img);
	
	if(nHackingPointerAnimation != -1)
		DrawAnimation(nHackingPointerAnimation);
}

void MenuHackingLogic()
{
	if(BUTTON_SHOOT)
	{
		if(nHackingRandomPasswordIndex > 0 && nHackingCertainty >= 70)
			HackingIncrementPasswordIndex();
	}
	
	UnpressButtons();
}

void MenuHackingClose()
{
	FreeDelayedCallbackByFunction("HackingLogicTick");
	
	SetPause(0);
}

void HackingLogicTick()
{
	int i;
	string sTempPassword = "";
	
	//Generate a new password
	for(i=0;i<50;i++)
	{
		sTempPassword += chr(random(33, 122));
	}
	
	sHackingRandomPassword[nHackingRandomPasswordIndex] = sTempPassword;
	
	//Generate a certainty for this password
	nHackingCertainty = random(1, 100);
	
	//Remove this function from the delayed callback list if it is there. 
	//Could be caused by calling HackingLogicTick() directly instead of waiting for the tick.
	//Keeps HackingLogicTick() from being added multiple times and causing lots of trouble
	FreeDelayedCallbackByFunction("HackingLogicTick");
	
	//Re add this function to the delayed callback list so it will be called again in 1 tick
	CreateDelayedCallbackEx(nHackingCertaintyDelay, "HackingLogicTick", 1);
}

void HackingIncrementPasswordIndex()
{
	nHackingRandomPasswordIndex++;
	
	//Calculate a new password and certainty imediatly after the user accepts a password
	HackingLogicTick();
	
	if(nHackingRandomPasswordIndex == 5)
	{
		nHackingRandomPasswordIndex = 4;
		
		//hack complete. Close this menu and run the function passed to OpenHackingMenu().
		CloseTopMenu();
		CallFunction(sHackingCompleteFunction);
	}
}

void HackingFirstMessage()
{
	sHackingMessage += "Scanning Binaries.";
	CreateDelayedCallbackEx(5, "HackingStepFirstMessage", 1);
}

void HackingStepFirstMessage()
{
	sHackingMessage += " .";
	
	if(len(sHackingMessage) >= 83)
	{
		sHackingMessage += chr('\n');
		HackingSecondMessage();
	}
	else
		CreateDelayedCallbackEx(5, "HackingStepFirstMessage", 1);
}

void HackingSecondMessage()
{
	sHackingMessage += "Hash retrieved. Decoding.";
	CreateDelayedCallbackEx(5, "HackingStepSecondMessage", 1);
}

void HackingStepSecondMessage()
{
	sHackingMessage += " .";
	
	if(len(sHackingMessage) >= 165)
	{
		sHackingMessage += chr('\n');
		sHackingMessage += "Displaying possible passwords. Awating user input.";
		HackingStart();
	}
	else
		CreateDelayedCallbackEx(5, "HackingStepSecondMessage", 1);
}

void HackingStart()
{
	sHackingAsseptPasswordText = "Accept Password";

	nHackingPointerAnimation = LoadAnimationEX("cursor.png", 8, 8, 43, 165, ANIMATION_CURSOR_ANIM_STRING);
	anims[nHackingPointerAnimation].automatic = 0;

	nHackingRandomPasswordIndex = 1;
	HackingLogicTick();
}