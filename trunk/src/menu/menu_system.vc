struct Menu
{
	int nActive;

	string sDrawFunc;	//function to call to draw this menu
				//Note: the draw func must use nMenuX and nMenuY and the XY coords 
				//to draw the menu at
	string sLogicFunc;	//function to call every tick for the logic of this menu
	string sCloseFunc;	//function to call to clean up after the menu when it's closed
	string sName;		//a nice human readable tag to find the menu by
}

int nMenuX, nMenuY;
Menu MenuTemplates[MAX_MENUS];

struct AMenu
{
	int nActive;
	int nMenuTemplate;	//reference to MenuTemplate - so I know what functions to call to draw it and so on
	int nX;
	int nY;
}

AMenu ActiveMenus[MAX_MENUS];

int nMenuFocus;			//index of the AMenu that has the focus
int nPointerPos;		//position of a pointer - everyone gets a turn!
int nCurrentMenu;		//a nice little var that always points to the menu being worked on - everyone gets a turn here too
int nMenuStack[MAX_MENUS];	//the stack of open menus. so when I close one the focus moves to the previous one

void CreateMenuTemplates()
{
	int i;
	
	CreateMenuTemplate("MainMenu", "MainMenuDraw", "MainMenuLogic", "MainMenuClose");	//main menu
	CreateMenuTemplate("MainClock", "MainClockDraw", "", "");			//clock on the main menu
	CreateMenuTemplate("MenuKeyConfig", "MenuKeyConfigDraw", "MenuKeyConfigLogic", "MenuKeyConfigClose");
	CreateMenuTemplate("MenuKeyConfigJoy", "MenuJoyConfigDraw", "MenuJoyConfigLogic", "MenuJoyConfigClose");
	CreateMenuTemplate("MenuKeyConfigKey", "MenuKeyboardConfigDraw", "MenuKeyboardConfigLogic", "MenuKeyboardConfigClose");
	CreateMenuTemplate("MenuInGame", "MenuInGameDraw", "MenuInGameLogic", "MenuInGameClose");
	CreateMenuTemplate("MenuOptions", "MenuOptionsDraw", "MenuOptionsLogic", "MenuOptionsClose");
	CreateMenuTemplate("MenuChoice", "MenuChoiceDraw", "MenuChoiceLogic", "MenuChoiceClose");
	CreateMenuTemplate("MenuSave", "MenuSaveDraw", "MenuSaveLogic", "MenuSaveClose");
	CreateMenuTemplate("MenuLoad", "MenuLoadDraw", "MenuLoadLogic", "MenuLoadClose");
	CreateMenuTemplate("MenuGameOver", "MenuGameOverDraw", "MenuGameOverLogic", "MenuGameOverClose");
	CreateMenuTemplate("MenuDigitPad", "MenuDigitPadDraw", "MenuDigitPadLogic", "MenuDigitPadClose");
	CreateMenuTemplate("MenuMessage", "MenuMessageDraw", "MenuMessageLogic", "MenuMessageClose");	//used for showing a message to the player and pausing the screen
	CreateMenuTemplate("MenuPDA", "MenuPDADraw", "MenuPDALogic", "MenuPDAClose");
	CreateMenuTemplate("MenuLeaderboard", "MenuLeaderboardDraw", "MenuLeaderboardLogic", "MenuLeaderboardClose");
	CreateMenuTemplate("MenuAchivement", "MenuAchivementDraw", "MenuAchivementLogic", "MenuAchivementClose");
	CreateMenuTemplate("MenuType", "MenuTypeDraw", "MenuTypeLogic", "MenuTypeClose");
	CreateMenuTemplate("MenuMainKeys", "MenuMainKeysDraw", "", "");
	CreateMenuTemplate("MenuMainLogo", "MenuMainLogoDraw", "", "");
	CreateMenuTemplate("MenuArena", "MenuArenaDraw", "MenuArenaLogic", "MenuArenaClose");
	CreateMenuTemplate("MenuScore", "MenuScoreDraw", "MenuScoreLogic", "MenuScoreClose");
	CreateMenuTemplate("MenuMessageChoice", "MenuMessageChoiceDraw", "MenuMessageChoiceLogic", "MenuMessageChoiceClose");
	CreateMenuTemplate("MenuChooseWeapon", "MenuChooseWeaponDraw", "MenuChooseWeaponLogic", "MenuChooseWeaponClose");
	CreateMenuTemplate("MenuHacking", "MenuHackingDraw", "MenuHackingLogic", "MenuHackingClose");
	CreateMenuTemplate("MenuComputer", "MenuComputerDraw", "MenuComputerLogic", "MenuComputerClose");
	
	//init the menu stack here because I can
	for(i=0;i<MAX_MENUS;i++)
	{
		nMenuStack[i] = 0-1;
	}
}

int GetMenuTemplateIndex(string name)
{
	int i;
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(!strcmp(MenuTemplates[i].sName, name))
			return i;
	}
	
	Exit("menu.vc::GetMenuTemplateIndex() - Menu template " + name + " not found.");
}

void CreateMenuTemplate(string name, string draw, string logic, string close)
{
	int i;
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(!MenuTemplates[i].nActive)
		{
			MenuTemplates[i].sName = name;
			MenuTemplates[i].sDrawFunc = draw;
			MenuTemplates[i].sLogicFunc = logic;
			MenuTemplates[i].sCloseFunc = close;
			MenuTemplates[i].nActive = 1;
			return;
		}
	}
}

int CreateMenu(int x, int y, int template)
{
	int i;
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(!ActiveMenus[i].nActive)
		{
			ActiveMenus[i].nX = x;
			ActiveMenus[i].nY = y;
			ActiveMenus[i].nMenuTemplate = template;
			ActiveMenus[i].nActive = 1;
			
			nMenuFocus = i;
			PushMenuStack(i);
			
			return 1;
		}
	}
	
	Exit("menu.vc::CreateMenu() - MAX_MENUS to small!");
}

void CloseTopMenu()
{
	CloseMenu(PopMenuStack());
}

void CloseMenu(int mnu)
{
	if(strcmp(MenuTemplates[ActiveMenus[mnu].nMenuTemplate].sCloseFunc, "")!=0)
	{
		if(functionexists(MenuTemplates[ActiveMenus[mnu].nMenuTemplate].sCloseFunc))
		{
			CallFunction(MenuTemplates[ActiveMenus[mnu].nMenuTemplate].sCloseFunc);
		}
		else
		{
			Error("Close function '" + MenuTemplates[ActiveMenus[mnu].nMenuTemplate].sCloseFunc + "' does not exist");
		}
	}

	ActiveMenus[mnu].nActive = 0;

	nMenuFocus = TopMenuStack();
	
	nPointerPos = 0;
}

void CloseAllMenus()
{
	int i;
	
	while(!MenuStackEmpty())
	{
		CloseMenu(PopMenuStack());
	}
}

//draw all the AMenus, call the logic func of the menu with the focus
void ProcessMenus()
{
	int i;
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(ActiveMenus[i].nActive)
		{
			nCurrentMenu = i;
			
			nMenuX = ActiveMenus[i].nX;
			nMenuY = ActiveMenus[i].nY;

			//draw this menu
			CallFunction(MenuTemplates[ActiveMenus[i].nMenuTemplate].sDrawFunc);
			
			//if this is the menu with the focus
			//do it's logic
			if(nMenuFocus == i)
			{
				CallFunction(MenuTemplates[ActiveMenus[i].nMenuTemplate].sLogicFunc);
			}
		}
	}
}

//makes a blank window
int CreateWindow(string title, int width, int height, int fnt)
{
	int menuimg;
	//make the window
	menuimg = NewImage(width, height);
	
	//fill it with black
	RectFill(0, 0, width-1, height-1, RGB(0, 0, 0), menuimg);
	
	//put the grey border on it
	Rect(0, 0, width-1, height-1, RGB(54, 54, 54), menuimg);
	
	//put the line across the bottom of the title
	Line(0, 8, width-1, 8, RGB(54, 54, 54), menuimg);
	
	//put the lighter grey rect in the bottom
	Rect(1, 9, width-2, height-2, RGB(64, 64, 64), menuimg);
	
	//put the blue title background in
	RectFill(1, 1, width-2, 7, RGB(4, 6, 98), menuimg);
	
	//put the text in the title
	PrintString(2, 2, menuimg, fnt, title);
	
	return menuimg;
}

//makes window with choices, choices are seperated by |
int CreateMenuChoice(string title, string choices, int fnt)
{
	int menuimg;
	int width, height;
	int i, bigindex, biglen;
	int done;
	int spacing = 3;
	
	bigindex = 0;

	biglen = TextWidth(fnt, GetToken(choices, "|", bigindex));
	
	//find the longest of the choices
	for(i=0;i<TokenCount(choices, "|");i++)
	{
		if(TextWidth(fnt, GetToken(choices, "|", i)) > biglen)
		{
			bigindex = i;
			biglen = TextWidth(fnt, GetToken(choices, "|", bigindex));
		}
	}

	width = biglen+25; //len of the longest string plus 10 on each side
	height = (TokenCount(choices, "|")*(FontHeight(fnt)+spacing)) + 20; //choices * height on font + 3 pixels spacing, 10 for the title, 10 bot footer
	
	//make the window
	menuimg = NewImage(width, height);
	
	//fill it with black
	RectFill(0, 0, width-1, height-1, RGB(0, 0, 0), menuimg);
	
	//put the grey border on it
	Rect(0, 0, width-1, height-1, RGB(54, 54, 54), menuimg);
	
	//put the line across the bottom of the title
	Line(0, 8, width-1, 8, RGB(54, 54, 54), menuimg);
	
	//put the lighter grey rect in the bottom
	Rect(1, 9, width-2, height-2, RGB(64, 64, 64), menuimg);
	
	//put the blue title background in
	RectFill(1, 1, width-2, 7, RGB(4, 6, 98), menuimg);
	
	//put the text in the title
	PrintString(2, 2, menuimg, fnt, title);
	
	//put the choices in the menu
	for(i=0;i<TokenCount(choices, "|");i++)
	{
		PrintString(10, 15+(i*(FontHeight(fnt)+spacing)), menuimg, fnt, GetToken(choices, "|", i));
	}
	
	return menuimg;
}

//finds the first index of nMenuStack >=0 and puts idx there
void PushMenuStack(int idx)
{
	int i;

	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(nMenuStack[i] < 0)
		{
			nMenuStack[i] = idx;
			return;
		}
	}
	
	Exit("menu_system.vc::PushMenuStack() - MAX_MENUS to small");
}

void dumpmenustack()
{
	int i;
	for(i=0;i<MAX_MENUS && nMenuStack[i]>=0;i++)
	{
		Error(MenuTemplates[ActiveMenus[nMenuStack[i]].nMenuTemplate].sName);
		Error(str(nMenuStack[i]));
	}
}

//same as PopMenuStack, but dosen't remove the item from it
int TopMenuStack()
{
	int i, retval;
	
	if(MenuStackEmpty())
		Error("menu_system.vc::TopMenuStack() - Menu stack is empty!");
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(nMenuStack[i] < 0)
			return retval;
		else
			retval = nMenuStack[i];
	}

}

//finds the last index of nMenuStack >= 0, sets it to 0-1 and returns the value
int PopMenuStack()
{
	int i, retval;
	
	if(MenuStackEmpty())
		Error("menu_system.vc::PopMenuStack() - Menu stack is empty!");
	
	for(i=0;i<MAX_MENUS;i++)
	{
		if(nMenuStack[i] < 0)
		{
			nMenuStack[i-1] = -1;
			return retval;
		}
		else
			retval = nMenuStack[i];
	}
}

int MenuStackEmpty()
{
	if(nMenuStack[0] == -1)
		return 1;
	else
		return 0;
}