//menu that allows the user to type things. Like...using a keyboard
string sTypeMenuRetVal;
string sTypeMenuPrompt;
int nTypeMenuMaxLen;

int nTypeMenuDone;

string MenuType(string prompt, int MaxLen)
{
	sTypeMenuRetVal = "";
	
	sTypeMenuPrompt = prompt;
	nTypeMenuMaxLen = MaxLen;

	MenuTypeOpen();

	UnpressButtons();
	
	//store dual retrace counter
	StoreDualCounter();

	//change counter so render() dosen't have a seisure	
	nDualCounter = 0;
	
	nTypeMenuDone = 0;
	
	while(!nTypeMenuDone)
	{
		Render();
		ShowPage();
	}
	
	//restore dual counter so things go back to normal
	RestoreDualCounter();
	
	CloseTopMenu();
	
	//return the code entered
	return sTypeMenuRetVal;
}

void MenuTypeOpen()
{
	int x = 100;
	int y = 100;
	
	nTypeMenuDone = 0;
	
	SwitchPause();
	
	CreateMenu(x, y, GetMenuTemplateIndex("MenuType"));
}

void MenuTypeClose()
{
	SwitchPause();
}

void MenuTypeLogic()
{
	int i;
	
	//look for scan codes that I care about
	
	//numbers 1-0
	for(i=2;i<=11;i++)
	{
		if(key[i])
		{
			if(len(sTypeMenuRetVal) < nTypeMenuMaxLen)
			{
				SoundKeyboardRand();
				sTypeMenuRetVal += ScanToKeyName(i);
				key[i]=0;
			}
		}
	}
	
	//first set Q-P
	for(i=16;i<=25;i++)
	{
		if(key[i])
		{
			if(len(sTypeMenuRetVal) < nTypeMenuMaxLen)
			{
				SoundKeyboardRand();
				sTypeMenuRetVal += ScanToKeyName(i);
				key[i]=0;
			}
		}
	}
	
	//second set A-L
	for(i=30;i<=38;i++)
	{
		if(key[i])
		{
			if(len(sTypeMenuRetVal) < nTypeMenuMaxLen)
			{
				SoundKeyboardRand();
				sTypeMenuRetVal += ScanToKeyName(i);
				key[i]=0;
			}
		}
	}	

	//second set Z-M
	for(i=44;i<=50;i++)
	{
		if(key[i])
		{
			if(len(sTypeMenuRetVal) < nTypeMenuMaxLen)
			{
				SoundKeyboardRand();
				sTypeMenuRetVal += ScanToKeyName(i);
				key[i]=0;
			}
		}
	}
	
	//backspace, remove a letter
	if(key[SCAN_BACKSP])
	{
		if(len(sTypeMenuRetVal) > 0)
		{
			SoundKeyboardRand();
			sTypeMenuRetVal = left(sTypeMenuRetVal, len(sTypeMenuRetVal)-1);
			key[SCAN_BACKSP]=0;
		}
	}
	
	//done typing
	if(key[SCAN_ENTER])
	{
		SoundKeyboardRand();
		nTypeMenuDone = 1;
		
		UnpressButtons();
		key[SCAN_ENTER] = 0;
	}
}

void MenuTypeDraw()
{
	int img = CreateWindow(sTypeMenuPrompt, 150, 40, nTerminalFont);
	
	PrintString(8, 16, img, nTerminalFont, sTypeMenuPrompt);
	PrintString(8, 24, img, nTerminalFont, sTypeMenuRetVal);
	
	Blit(nMenuX, nMenuY, img, screen);	
	FreeImage(img);
}