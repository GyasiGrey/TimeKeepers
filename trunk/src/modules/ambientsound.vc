// ambientsound.vc - holds the structures for ambient sound

#define MAX_AMBIENTSOUNDS 100

struct AmbientSound
{
	int nX;
	int nY;
	string sFilename;
	int nDelay;
	int nLastSoundAt;
	int nRange;
	int nActive;
}

AmbientSound ASounds[MAX_AMBIENTSOUNDS];
int bAmbientSoundEnabled;

int CreateAmbientSound(int x, int y, string sound, int delay, int range)
{
	int i;
	
	for(i=0;i<MAX_AMBIENTSOUNDS;i++)
	{
		if(!ASounds[i].nActive)
		{
			ASounds[i].nX = x;
			ASounds[i].nY = y;
			ASounds[i].sFilename = sound;
			ASounds[i].nDelay = delay;
			ASounds[i].nRange = range;
			ASounds[i].nActive = 1;
			return i;
		}
	}
	
	Exit("ambientsound.vc::CreateAmbientSound - Not enough Ambient Sounds - Increase MAX_AMBIENTSOUNDS");
}

void ProcessAmbientSounds()
{
	int i, dist;
	
	if(!bAmbientSoundEnabled)
		return;
	
	for(i=0;i<MAX_AMBIENTSOUNDS;i++)
	{
		dist = DistanceXY(entity.x[nPlayerEnt], entity.y[nPlayerEnt], ASounds[i].nX, ASounds[i].nY);

		if(ASounds[i].nActive && dist <= ASounds[i].nRange && timer-ASounds[i].nLastSoundAt > ASounds[i].nDelay)
		{
			//play the sound
			PlaySoundStackDistance(ASounds[i].sFilename, ASounds[i].nX, ASounds[i].nY, ASounds[i].nRange);
			
			ASounds[i].nLastSoundAt = timer;
		}
	}
}

void FreeAmbientSound(int i)
{
	ASounds[i].nActive = 0;
}

void ClearAmbientSounds()
{
	int i;

	
	for(i=0;i<MAX_AMBIENTSOUNDS;i++)
	{
		if(ASounds[i].nActive)
		{
			ASounds[i].nActive = 0;
		}
	}
}