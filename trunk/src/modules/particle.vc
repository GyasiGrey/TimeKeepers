//particle.vc - Holds all the code for particles and particle emiters

#define MAX_PARTICLES 500
#define MAX_EMITTERS 500

struct Particle
{
	int nX;		//xy coords
	int nY;
	int nDX;	//xy velocity
	int nDY;
	int nLife;	//timer when the particle should die
	int nImage;
	int nLucency;
	int nMoveDelay;
	int nLastMove;
	int nActive;
}

Particle Particles[MAX_PARTICLES];

struct Emitter
{
	int nX;
	int nY;
	string sParticleImage;		//the image of the particle to be
	int nMaxParticles;		//how many particles to make, or -1 for inf
	int nDelay;			//how long to wait between making particles
	int nLastParticleAt;		//timer when the last particle was made
	int nDirectionMax;		//min angle to be sent at
	int nDirectionMin;		//max angle to be sent at
	int nVelocity;			//speed angles are sent at
	int nLifeMax;			//the max and min life of the particles created
	int nLifeMin;
	int nMoveDelay;
	int nParticlesMade;
	int nLucency;
	int nActive;
}

Emitter Emitters[MAX_EMITTERS];
int bParticlesEnabled;


void CreateEmitter(int x, int y, string image, int maxparticles, int delay, int mdelay, int dmax, int dmin, int velocity, int luc, int lifemax, int lifemin)
{
	int i;
	
	for(i=0;i<MAX_EMITTERS;i++)
	{
		if(!Emitters[i].nActive)
		{
			Emitters[i].nX = x;
			Emitters[i].nY = y;
			Emitters[i].sParticleImage = image;
			Emitters[i].nMaxparticles = maxparticles;
			Emitters[i].nDelay = delay;
			Emitters[i].nDirectionMax = dmax;
			Emitters[i].nDirectionMin = dmin;
			Emitters[i].nVelocity = velocity;
			Emitters[i].nLifeMax = lifemax;
			Emitters[i].nLifeMin = lifemin;
			Emitters[i].nMoveDelay = mdelay;
			Emitters[i].nParticlesMade = 0;
			Emitters[i].nLucency = luc;
			Emitters[i].nLastParticleAt = 0;
			Emitters[i].nActive = 1;
			return;
		}
	}
	
	Exit("particle.vc::CreateEmitter - Not enough emitters - Increase MAX_EMITTERS");	
}

void ProcessEmitters()
{
	int i, theta;
	
	for(i=0;i<MAX_EMITTERS;i++)
	{
		if(Emitters[i].nActive && timer-Emitters[i].nLastParticleAt > Emitters[i].nDelay)
		{
			theta = Random(Emitters[i].nDirectionMax, Emitters[i].nDirectionMin);
			CreateParticle(Emitters[i].nX, Emitters[i].nY, Emitters[i].nVelocity*cos(theta)/65535, Emitters[i].nVelocity*sin(theta)/65535, Emitters[i].nMoveDelay, LoadImage(Emitters[i].sParticleImage), Emitters[i].nLucency, timer+Random(Emitters[i].nLifeMax, Emitters[i].nLifeMin));
			Emitters[i].nLastParticleAt = timer;
			
			if(Emitters[i].nMaxParticles > 0-1 && Emitters[i].nParticlesMade > Emitters[i].nMaxParticles)
			{
				DestroyEmitter(i);
			}
		}
	}
}

void DestroyEmitter(int i)
{
	Emitters[i].nActive = 0;
}

void DestroyEmitters()
{
	int i;
	
	for(i=0;i<MAX_EMITTERS;i++)
	{
		if(Emitters[i].nActive)
			DestroyEmitter(i);
	}
}

void CreateParticle(int x, int y, int dx, int dy, int mdelay, int image, int luc, int life)
{
	int i;
	

	for(i=0;i<MAX_PARTICLES;i++)
	{
		if(!Particles[i].nActive)
		{
			Particles[i].nX = x;
			Particles[i].nY = y;
			Particles[i].nDX = dx;
			Particles[i].nDY = dy;
			Particles[i].nImage = image;
			Particles[i].nLife = life;
			Particles[i].nMoveDelay = mdelay;
			Particles[i].nLucency = luc;
			Particles[i].nActive = 1;
			return;
		}
	}
	
	Exit("particle.vc::CreateParticle - Not enough particles - Increase MAX_PARTICLES");
}

void ProcessParticles()
{
	int i;

	
	for(i=0;i<MAX_PARTICLES;i++)
	{
		if(Particles[i].nActive)
		{
			if(timer-Particles[i].nLastMove > Particles[i].nMoveDelay)
			{
				Particles[i].nX += Particles[i].nDX;
				Particles[i].nY += Particles[i].nDY;
				Particles[i].nLastMove = timer;
			}
			
			if(bParticlesEnabled)
			{
				SetLucent(Particles[i].nLucency);
				TBlit(Particles[i].nX-xwin, Particles[i].nY-ywin, Particles[i].nImage, screen);
				SetLucent(0);
			}
			
			if(timer >  Particles[i].nLife)
			{
				DestroyParticle(i);
			}
		}
	}
}

void DestroyParticle(int i)
{
	FreeImage(Particles[i].nImage);
	Particles[i].nActive = 0;
}

void DestroyParticles()
{
	int i;
	
	for(i=0;i<MAX_PARTICLES;i++)
	{
		if(Particles[i].nActive)
			DestroyParticle(i);
	}
}