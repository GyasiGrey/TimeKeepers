#define RADAR_RANGE 100
int RADAR_WIDTH = 60;
int RADAR_HEIGHT = 40;

int nRadarOn;

//makes an image of the local enemies and plops them on the screen
void DrawRadar()
{
	int i;
	int radarx, radary;
	int img;
	int color;
	
	//if the radar is not on, exit out
	if(!nRadarOn)
		return;
	
	img = NewImage(RADAR_WIDTH, RADAR_HEIGHT);
	
	RectFill(0, 0, RADAR_WIDTH, RADAR_HEIGHT, RGB(80, 80, 80), img);
	
	//draw the players blip
	RectFill((RADAR_WIDTH/2)-1, (RADAR_HEIGHT/2)-1, (RADAR_WIDTH/2)+1, (RADAR_HEIGHT/2)+1, RGB(0, 255, 0), img);
	
	//draw the enemies blips
	for(i=0;i<MAX_ENEMIES;i++)
	{
		if(Enemies[i].nActive)
		{
			radarx = (((entity.x[Enemies[i].nEntity]-xwin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageWidth(screen)))*RADAR_WIDTH;
			radary = (((entity.y[Enemies[i].nEntity]-ywin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageHeight(screen)))*RADAR_HEIGHT;
			
			radarx = radarx / 100;
			radary = radary / 100;
			
			if(Enemies[i].nAIType == ENEMY_TEMPLATE_CIVILIAN)
				color = RGB(0, 0, 255);
			else //if (Enemies[i].nAIType == ENEMY_AI_TYPE_NORMAL || Enemies[i].nAIType == ENEMY_AI_TYPE_DUMMY)
				color = RGB(255, 0, 0);
				
			//the -1, +1 is to more or less center the square around the enemy
			RectFill(radarx-1, radary-1, radarx+1, radary+1, color, img);
			//printstring(radarx, radary, img, 0, str(i));
		}
	}
	
	//shove the radar onto the screen, scaled to the size of the radar
	SetLucent(30);
	Blit(ImageWidth(screen)-RADAR_WIDTH, 0, img, screen);
	SetLucent(0);
	
	//put a border around the radar
	Rect(ImageWidth(screen)-RADAR_WIDTH, 0, ImageWidth(screen)-1, RADAR_HEIGHT, RGB(255, 255, 255), screen);
	
	FreeImage(img);
}
