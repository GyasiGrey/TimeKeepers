#define RADAR_RANGE 100
int RADAR_WIDTH = 60;
int RADAR_HEIGHT = 40;

int nRadarOn;

//makes an image of the local enemies and plops them on the screen
void DrawRadar()
{
	int i;
	int radarx, radary;
	int img;
	int color;

	int ang;
	int bot;
	int top;

	int x1, y1, x2, y2, x3, y3;
	
	int nTriangleColor;
	
	//if the radar is not on, exit out
	if(!nRadarOn)
		return;
	
	img = NewImage(RADAR_WIDTH, RADAR_HEIGHT);
	
	RectFill(0, 0, RADAR_WIDTH, RADAR_HEIGHT, RGB(80, 80, 80), img);
	
	//draw the players blip
	RectFill((RADAR_WIDTH/2)-1, (RADAR_HEIGHT/2)-1, (RADAR_WIDTH/2)+1, (RADAR_HEIGHT/2)+1, RGB(0, 255, 0), img);
	
	//draw the enemies blips
	for(i=0;i<MAX_ENEMIES;i++)
	{
		if(Enemies[i].nActive && Enemies[i].nMode != MODE_TRANQ)
		{
			radarx = (((entity.x[Enemies[i].nEntity]-xwin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageWidth(screen)))*RADAR_WIDTH;
			radary = (((entity.y[Enemies[i].nEntity]-ywin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageHeight(screen)))*RADAR_HEIGHT;
			
			radarx = radarx / 100;
			radary = radary / 100;
			
			if(Enemies[i].nAIType == ENEMY_TEMPLATE_CIVILIAN)
				color = RGB(0, 0, 255);
			else //if (Enemies[i].nAIType == ENEMY_AI_TYPE_NORMAL || Enemies[i].nAIType == ENEMY_AI_TYPE_DUMMY)
				color = RGB(255, 0, 0);
				
			//the -1, +1 is to more or less center the square around the enemy
			RectFill(radarx-1, radary-1, radarx+1, radary+1, color, img);
			//printstring(radarx, radary, img, 0, str(i));
			
			//draw the FoV of this enemy
			//up
			if(entity.face[Enemies[i].nEntity] == ENTITY_FACE_DOWN)
				ang = 270;

			//down
			if(entity.face[Enemies[i].nEntity] == ENTITY_FACE_UP)
				ang = 90;

			//left
			if(entity.face[Enemies[i].nEntity] == ENTITY_FACE_RIGHT)
				ang = 180;

			//right
			if(entity.face[Enemies[i].nEntity] == ENTITY_FACE_LEFT)
				ang = 0;
				
			bot = ang-Enemies[i].nSightAngle;
			top = ang+Enemies[i].nSightAngle;

			x1 = entity.x[Enemies[i].nEntity];
			y1 = entity.y[Enemies[i].nEntity];
			
			x2 = entity.x[Enemies[i].nEntity] - ((Enemies[i].nSightRange * cos(top))/65535);
			y2 = entity.y[Enemies[i].nEntity] - ((Enemies[i].nSightRange * sin(top))/65535);
			
			x3 = entity.x[Enemies[i].nEntity] - ((Enemies[i].nSightRange * cos(bot))/65535);
			y3 = entity.y[Enemies[i].nEntity] - ((Enemies[i].nSightRange * sin(bot))/65535);

			//DEBUG
			//triangle(x1-xwin, y1-ywin, x2-xwin, y2-ywin, x3-xwin, y3-ywin, RGB(0, 255, 0), screen);
			//DEBUG

			x1 = ((((x1-xwin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageWidth(screen)))*RADAR_WIDTH)/100;
			y1 = ((((y1-ywin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageHeight(screen)))*RADAR_HEIGHT)/100;
			
			x2 = ((((x2-xwin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageWidth(screen)))*RADAR_WIDTH)/100;
			y2 = ((((y2-ywin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageHeight(screen)))*RADAR_HEIGHT)/100;

			x3 = ((((x3-xwin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageWidth(screen)))*RADAR_WIDTH)/100;
			y3 = ((((y3-ywin+RADAR_RANGE)*100)/((RADAR_RANGE*2)+ImageHeight(screen)))*RADAR_HEIGHT)/100;

			if(Enemies[i].nMode == MODE_ALERT)
				nTriangleColor = RGB(255, 0, 0);
			else
				nTriangleColor = RGB(0, 255, 0);

			SetLucent(50);
			Triangle(x1, y1, x2, y2, x3, y3, nTriangleColor, img);
			SetLucent(0);
		}
	}
	
	//shove the radar onto the screen, scaled to the size of the radar
	SetLucent(30);
	Blit(ImageWidth(screen)-RADAR_WIDTH, 0, img, screen);
	SetLucent(0);
	
	//put a border around the radar
	Rect(ImageWidth(screen)-RADAR_WIDTH, 0, ImageWidth(screen)-1, RADAR_HEIGHT, RGB(255, 255, 255), screen);
	
	FreeImage(img);
}
