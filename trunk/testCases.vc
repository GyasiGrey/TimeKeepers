void test_qsortSwap()
{
	nSortArray[0] = 10;
	nSortArray[1] = 15;
	
	qsortSwap(0, 1);
	
	assertTrue(nSortArray[0] == 15);
	assertTrue(nSortArray[1] == 10);
}

void test_implode()
{
	nSortArray[0] = 10;
	nSortArray[1] = 15;
	nSortArray[2] = -1;

	assertTrue(strcmp(implode(), "10 15 ") == 0);
}

void test_qsort()
{
	string sData = "2 1 3 4 ";

	assertTrue(strcmp(qsort(sData, 0, TokenCount(sData, " ")-1), "1 2 3 4 ") == 0);
}

void test_qsortByOther()
{
	string sData = "2 1 3 5 ";
	string sKeys = "4 3 2 1 ";

	assertTrue(strcmp(qsortbyother(sData, sKeys, 0, TokenCount(sData, " ")-1), "5 3 1 2 ") == 0);
}

void test_NodeWithShortestDistance()
{
	int result;
	
	//setup some distances
	EmptyQueue();
	
	queue[0] = 0;
	queue[1] = 1;
	queue[2] = 2;
	
	nDistances[0] = 10;
	nDistances[1] = 5;
	nDistances[2] = 15;
	
	result = NodeWithShortestDistance();

	assertTrue(result == 1);
	
	//clean up after your self
	nDistances[0] = 0;
	nDistances[1] = 0;
	nDistances[2] = 0;
	
	EmptyQueue();
}


/*returns 1 if the hit is on the left
returns 2 if the hit is on the right
returns 3 if the hit is to the top
returns 4 if the hit is to the bottom
*/

void test_XYCollision()
{
	//objects outside each other
	assertFalse(CheckCollisionXY(1, 1, 1, 1, 5, 5, 10, 10));
	
	//object one colides on left side of object two
	assertTrue(CheckCollisionXY(13, 8, 5, 2, 5, 5, 10, 10) == 1);

	//object one colides on right side of object two
	assertTrue(CheckCollisionXY(3, 8, 5, 2, 5, 5, 10, 10) == 2);

	//object one colides on top side of object two
	assertTrue(CheckCollisionXY(6, 14, 2, 4, 5, 5, 10, 10) == 3);
	
	//object one colides on bottom side of object two
	assertTrue(CheckCollisionXY(7, 3, 2, 7, 5, 5, 10, 10) == 4);
}

void test_FoV()
{
	//target is outside the source's FoV
	assertFalse(FoV(10, 10, 5, 5, 5, 5, 45, 90));

	//target is inside the source's FoV - source is facing left	
	assertTrue(FoV(10, 10, 5, 10, 5, 5, 45, 180));
	
	//target is inside the source's FoV - source is facing right
	assertTrue(FoV(10, 10, 15, 10, 5, 5, 45, 0));
	
	//target is inside the source's FoV - source is facing up
	assertTrue(FoV(10, 10, 10, 5, 5, 5, 45, 270));
	
	//target is inside the source's FoV - source is facing down
	assertTrue(FoV(10, 10, 10, 15, 5, 5, 45, 90));
}

void test_MakeScrollBar()
{
	//setup for this test - call MakeScrollBar() with some knows values
	int nTempImg = -1;
	nTempImg = MakeScrollBar(5, 100, 100, 50);

	//test that the function returns a valid image pointer
	assertTrue(ImageValid(nTempImg));
	
	//weird, but if I run the rest of the tests on an invalid image pointer everything will crash
	if(ImageValid(nTempImg))
	{
		//test the width of the image
		assertTrue(ImageWidth(nTempImg) == 5);

		//test the height of the image
		assertTrue(ImageHeight(nTempImg) == 100);
		
		//NYI - test that the returned image is the correct ratio of filled versus empty

		//clean up from the test - free the image
		FreeImage(nTempImg);
	}
}

void test_CalculateRatio()
{
	//test using hole number results only
	assertTrue(CalculateRatio(200, 100, 100) == 200);
	
	//test using decimal results
	assertTrue(CalculateRatio(200, 50, 100) == 100);
}

void testScrollingTextBlockHeight()
{
	//init - load a font put some text into the array
/*	int nTempFont = LoadFont("gfx\fonts\terminal_menu.png");
	EnableVariableWidth(nTempFont);
	sTextLines[0] = "Tech: I still have some things to finish up before the mission. Why don't you go to the training area to the right untill I'm ready?";

	assertTrue(ScrollingTextBlockHeight(0, 125, nTempFont) == 30);

	//cleanup
	sTextLines[0] = "";
	FreeFont(nTempFont);*/
}